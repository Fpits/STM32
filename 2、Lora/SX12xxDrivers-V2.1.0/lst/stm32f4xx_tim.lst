
C:\Users\gcristian\Desktop\F429\Drivers\obj\stm32f4xx_tim.o:     file format elf32-littlearm
C:\Users\gcristian\Desktop\F429\Drivers\obj\stm32f4xx_tim.o


Disassembly of section .text.TIM_DeInit:

00000000 <TIM_DeInit>:
TIM_DeInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:201
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:205
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
   8:	687a      	ldr	r2, [r7, #4]
   a:	4b78      	ldr	r3, [pc, #480]	; (1ec <TIM_DeInit+0x1ec>)
   c:	429a      	cmp	r2, r3
   e:	d10c      	bne.n	2a <TIM_DeInit+0x2a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:207
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  10:	f04f 0001 	mov.w	r0, #1
  14:	f04f 0101 	mov.w	r1, #1
  18:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:208
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  1c:	f04f 0001 	mov.w	r0, #1
  20:	f04f 0100 	mov.w	r1, #0
  24:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  28:	e0db      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:210
  } 
  else if (TIMx == TIM2) 
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  30:	d10c      	bne.n	4c <TIM_DeInit+0x4c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:212
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
  32:	f04f 0001 	mov.w	r0, #1
  36:	f04f 0101 	mov.w	r1, #1
  3a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:213
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  3e:	f04f 0001 	mov.w	r0, #1
  42:	f04f 0100 	mov.w	r1, #0
  46:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  4a:	e0ca      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:215
  }  
  else if (TIMx == TIM3)
  4c:	687a      	ldr	r2, [r7, #4]
  4e:	4b68      	ldr	r3, [pc, #416]	; (1f0 <TIM_DeInit+0x1f0>)
  50:	429a      	cmp	r2, r3
  52:	d10c      	bne.n	6e <TIM_DeInit+0x6e>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:217
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
  54:	f04f 0002 	mov.w	r0, #2
  58:	f04f 0101 	mov.w	r1, #1
  5c:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:218
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  60:	f04f 0002 	mov.w	r0, #2
  64:	f04f 0100 	mov.w	r1, #0
  68:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  6c:	e0b9      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:220
  }  
  else if (TIMx == TIM4)
  6e:	687a      	ldr	r2, [r7, #4]
  70:	4b60      	ldr	r3, [pc, #384]	; (1f4 <TIM_DeInit+0x1f4>)
  72:	429a      	cmp	r2, r3
  74:	d10c      	bne.n	90 <TIM_DeInit+0x90>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:222
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
  76:	f04f 0004 	mov.w	r0, #4
  7a:	f04f 0101 	mov.w	r1, #1
  7e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:223
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  82:	f04f 0004 	mov.w	r0, #4
  86:	f04f 0100 	mov.w	r1, #0
  8a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  8e:	e0a8      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:225
  }  
  else if (TIMx == TIM5)
  90:	687a      	ldr	r2, [r7, #4]
  92:	4b59      	ldr	r3, [pc, #356]	; (1f8 <TIM_DeInit+0x1f8>)
  94:	429a      	cmp	r2, r3
  96:	d10c      	bne.n	b2 <TIM_DeInit+0xb2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:227
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
  98:	f04f 0008 	mov.w	r0, #8
  9c:	f04f 0101 	mov.w	r1, #1
  a0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:228
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  a4:	f04f 0008 	mov.w	r0, #8
  a8:	f04f 0100 	mov.w	r1, #0
  ac:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  b0:	e097      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:230
  }  
  else if (TIMx == TIM6)  
  b2:	687a      	ldr	r2, [r7, #4]
  b4:	4b51      	ldr	r3, [pc, #324]	; (1fc <TIM_DeInit+0x1fc>)
  b6:	429a      	cmp	r2, r3
  b8:	d10c      	bne.n	d4 <TIM_DeInit+0xd4>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:232
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
  ba:	f04f 0010 	mov.w	r0, #16
  be:	f04f 0101 	mov.w	r1, #1
  c2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:233
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  c6:	f04f 0010 	mov.w	r0, #16
  ca:	f04f 0100 	mov.w	r1, #0
  ce:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  d2:	e086      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:235
  }  
  else if (TIMx == TIM7)
  d4:	687a      	ldr	r2, [r7, #4]
  d6:	4b4a      	ldr	r3, [pc, #296]	; (200 <TIM_DeInit+0x200>)
  d8:	429a      	cmp	r2, r3
  da:	d10c      	bne.n	f6 <TIM_DeInit+0xf6>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:237
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
  dc:	f04f 0020 	mov.w	r0, #32
  e0:	f04f 0101 	mov.w	r1, #1
  e4:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:238
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  e8:	f04f 0020 	mov.w	r0, #32
  ec:	f04f 0100 	mov.w	r1, #0
  f0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
  f4:	e075      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:240
  }  
  else if (TIMx == TIM8)
  f6:	687a      	ldr	r2, [r7, #4]
  f8:	4b42      	ldr	r3, [pc, #264]	; (204 <TIM_DeInit+0x204>)
  fa:	429a      	cmp	r2, r3
  fc:	d10c      	bne.n	118 <TIM_DeInit+0x118>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:242
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
  fe:	f04f 0002 	mov.w	r0, #2
 102:	f04f 0101 	mov.w	r1, #1
 106:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:243
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 10a:	f04f 0002 	mov.w	r0, #2
 10e:	f04f 0100 	mov.w	r1, #0
 112:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 116:	e064      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:245
  }  
  else if (TIMx == TIM9)
 118:	687a      	ldr	r2, [r7, #4]
 11a:	4b3b      	ldr	r3, [pc, #236]	; (208 <TIM_DeInit+0x208>)
 11c:	429a      	cmp	r2, r3
 11e:	d10c      	bne.n	13a <TIM_DeInit+0x13a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:247
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 120:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 124:	f04f 0101 	mov.w	r1, #1
 128:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:248
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 12c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 130:	f04f 0100 	mov.w	r1, #0
 134:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 138:	e053      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:250
   }  
  else if (TIMx == TIM10)
 13a:	687a      	ldr	r2, [r7, #4]
 13c:	4b33      	ldr	r3, [pc, #204]	; (20c <TIM_DeInit+0x20c>)
 13e:	429a      	cmp	r2, r3
 140:	d10c      	bne.n	15c <TIM_DeInit+0x15c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:252
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 142:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 146:	f04f 0101 	mov.w	r1, #1
 14a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:253
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 14e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 152:	f04f 0100 	mov.w	r1, #0
 156:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 15a:	e042      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:255
  }  
  else if (TIMx == TIM11) 
 15c:	687a      	ldr	r2, [r7, #4]
 15e:	4b2c      	ldr	r3, [pc, #176]	; (210 <TIM_DeInit+0x210>)
 160:	429a      	cmp	r2, r3
 162:	d10c      	bne.n	17e <TIM_DeInit+0x17e>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:257
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 164:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 168:	f04f 0101 	mov.w	r1, #1
 16c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:258
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 170:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 174:	f04f 0100 	mov.w	r1, #0
 178:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
 17c:	e031      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:260
  }  
  else if (TIMx == TIM12)
 17e:	687a      	ldr	r2, [r7, #4]
 180:	4b24      	ldr	r3, [pc, #144]	; (214 <TIM_DeInit+0x214>)
 182:	429a      	cmp	r2, r3
 184:	d10c      	bne.n	1a0 <TIM_DeInit+0x1a0>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:262
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 186:	f04f 0040 	mov.w	r0, #64	; 0x40
 18a:	f04f 0101 	mov.w	r1, #1
 18e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:263
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 192:	f04f 0040 	mov.w	r0, #64	; 0x40
 196:	f04f 0100 	mov.w	r1, #0
 19a:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 19e:	e020      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:265
  }  
  else if (TIMx == TIM13) 
 1a0:	687a      	ldr	r2, [r7, #4]
 1a2:	4b1d      	ldr	r3, [pc, #116]	; (218 <TIM_DeInit+0x218>)
 1a4:	429a      	cmp	r2, r3
 1a6:	d10c      	bne.n	1c2 <TIM_DeInit+0x1c2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:267
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 1a8:	f04f 0080 	mov.w	r0, #128	; 0x80
 1ac:	f04f 0101 	mov.w	r1, #1
 1b0:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:268
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 1b4:	f04f 0080 	mov.w	r0, #128	; 0x80
 1b8:	f04f 0100 	mov.w	r1, #0
 1bc:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
 1c0:	e00f      	b.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:272
  }  
  else
  { 
    if (TIMx == TIM14) 
 1c2:	687a      	ldr	r2, [r7, #4]
 1c4:	4b15      	ldr	r3, [pc, #84]	; (21c <TIM_DeInit+0x21c>)
 1c6:	429a      	cmp	r2, r3
 1c8:	d10b      	bne.n	1e2 <TIM_DeInit+0x1e2>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:274
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 1ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 1ce:	f04f 0101 	mov.w	r1, #1
 1d2:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:275
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 1d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 1da:	f04f 0100 	mov.w	r1, #0
 1de:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:278
    }   
  }
}
 1e2:	f107 0708 	add.w	r7, r7, #8
 1e6:	46bd      	mov	sp, r7
 1e8:	bd80      	pop	{r7, pc}
 1ea:	bf00      	nop
 1ec:	40010000 	.word	0x40010000
 1f0:	40000400 	.word	0x40000400
 1f4:	40000800 	.word	0x40000800
 1f8:	40000c00 	.word	0x40000c00
 1fc:	40001000 	.word	0x40001000
 200:	40001400 	.word	0x40001400
 204:	40010400 	.word	0x40010400
 208:	40014000 	.word	0x40014000
 20c:	40014400 	.word	0x40014400
 210:	40014800 	.word	0x40014800
 214:	40001800 	.word	0x40001800
 218:	40001c00 	.word	0x40001c00
 21c:	40002000 	.word	0x40002000

Disassembly of section .text.TIM_TimeBaseInit:

00000000 <TIM_TimeBaseInit>:
TIM_TimeBaseInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:289
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   0:	b085b480 	.word	0xb085b480
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:290
  uint16_t tmpcr1 = 0;
   a:	f04f 0300 	mov.w	r3, #0
   e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:297
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
  10:	687b      	ldr	r3, [r7, #4]
  12:	881b      	ldrh	r3, [r3, #0]
  14:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:299

  if((TIMx == TIM1) || (TIMx == TIM8)||
  16:	687a      	ldr	r2, [r7, #4]
  18:	4b29      	ldr	r3, [pc, #164]	; (c0 <TIM_TimeBaseInit+0xc0>)
  1a:	429a      	cmp	r2, r3
  1c:	d013      	beq.n	46 <TIM_TimeBaseInit+0x46>
  1e:	687a      	ldr	r2, [r7, #4]
  20:	4b28      	ldr	r3, [pc, #160]	; (c4 <TIM_TimeBaseInit+0xc4>)
  22:	429a      	cmp	r2, r3
  24:	d00f      	beq.n	46 <TIM_TimeBaseInit+0x46>
  26:	687b      	ldr	r3, [r7, #4]
  28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  2c:	d00b      	beq.n	46 <TIM_TimeBaseInit+0x46>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:300
     (TIMx == TIM2) || (TIMx == TIM3)||
  2e:	687a      	ldr	r2, [r7, #4]
  30:	4b25      	ldr	r3, [pc, #148]	; (c8 <TIM_TimeBaseInit+0xc8>)
  32:	429a      	cmp	r2, r3
  34:	d007      	beq.n	46 <TIM_TimeBaseInit+0x46>
  36:	687a      	ldr	r2, [r7, #4]
  38:	4b24      	ldr	r3, [pc, #144]	; (cc <TIM_TimeBaseInit+0xcc>)
  3a:	429a      	cmp	r2, r3
  3c:	d003      	beq.n	46 <TIM_TimeBaseInit+0x46>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:301
     (TIMx == TIM4) || (TIMx == TIM5)) 
  3e:	687a      	ldr	r2, [r7, #4]
  40:	4b23      	ldr	r3, [pc, #140]	; (d0 <TIM_TimeBaseInit+0xd0>)
  42:	429a      	cmp	r2, r3
  44:	d109      	bne.n	5a <TIM_TimeBaseInit+0x5a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:304
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
  46:	89fb      	ldrh	r3, [r7, #14]
  48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4c:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:305
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
  4e:	683b      	ldr	r3, [r7, #0]
  50:	885a      	ldrh	r2, [r3, #2]
  52:	89fb      	ldrh	r3, [r7, #14]
  54:	ea42 0303 	orr.w	r3, r2, r3
  58:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:308
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  5a:	687a      	ldr	r2, [r7, #4]
  5c:	4b1d      	ldr	r3, [pc, #116]	; (d4 <TIM_TimeBaseInit+0xd4>)
  5e:	429a      	cmp	r2, r3
  60:	d00d      	beq.n	7e <TIM_TimeBaseInit+0x7e>
  62:	687a      	ldr	r2, [r7, #4]
  64:	4b1c      	ldr	r3, [pc, #112]	; (d8 <TIM_TimeBaseInit+0xd8>)
  66:	429a      	cmp	r2, r3
  68:	d009      	beq.n	7e <TIM_TimeBaseInit+0x7e>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:311
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
  6a:	89fb      	ldrh	r3, [r7, #14]
  6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  70:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:312
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  72:	683b      	ldr	r3, [r7, #0]
  74:	891a      	ldrh	r2, [r3, #8]
  76:	89fb      	ldrh	r3, [r7, #14]
  78:	ea42 0303 	orr.w	r3, r2, r3
  7c:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:315
  }

  TIMx->CR1 = tmpcr1;
  7e:	687b      	ldr	r3, [r7, #4]
  80:	89fa      	ldrh	r2, [r7, #14]
  82:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:318

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
  84:	683b      	ldr	r3, [r7, #0]
  86:	685a      	ldr	r2, [r3, #4]
  88:	687b      	ldr	r3, [r7, #4]
  8a:	62da      	str	r2, [r3, #44]	; 0x2c
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:321
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
  8c:	683b      	ldr	r3, [r7, #0]
  8e:	881a      	ldrh	r2, [r3, #0]
  90:	687b      	ldr	r3, [r7, #4]
  92:	851a      	strh	r2, [r3, #40]	; 0x28
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:323
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  94:	687a      	ldr	r2, [r7, #4]
  96:	4b0a      	ldr	r3, [pc, #40]	; (c0 <TIM_TimeBaseInit+0xc0>)
  98:	429a      	cmp	r2, r3
  9a:	d003      	beq.n	a4 <TIM_TimeBaseInit+0xa4>
  9c:	687a      	ldr	r2, [r7, #4]
  9e:	4b09      	ldr	r3, [pc, #36]	; (c4 <TIM_TimeBaseInit+0xc4>)
  a0:	429a      	cmp	r2, r3
  a2:	d104      	bne.n	ae <TIM_TimeBaseInit+0xae>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:326
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  a4:	683b      	ldr	r3, [r7, #0]
  a6:	7a9b      	ldrb	r3, [r3, #10]
  a8:	461a      	mov	r2, r3
  aa:	687b      	ldr	r3, [r7, #4]
  ac:	861a      	strh	r2, [r3, #48]	; 0x30
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:331
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
  ae:	687b      	ldr	r3, [r7, #4]
  b0:	f04f 0201 	mov.w	r2, #1
  b4:	829a      	strh	r2, [r3, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:332
}
  b6:	f107 0714 	add.w	r7, r7, #20
  ba:	46bd      	mov	sp, r7
  bc:	bc80      	pop	{r7}
  be:	4770      	bx	lr
  c0:	40010000 	.word	0x40010000
  c4:	40010400 	.word	0x40010400
  c8:	40000400 	.word	0x40000400
  cc:	40000800 	.word	0x40000800
  d0:	40000c00 	.word	0x40000c00
  d4:	40001000 	.word	0x40001000
  d8:	40001400 	.word	0x40001400

Disassembly of section .text.TIM_TimeBaseStructInit:

00000000 <TIM_TimeBaseStructInit>:
TIM_TimeBaseStructInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:341
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:343
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
   8:	687b      	ldr	r3, [r7, #4]
   a:	f04f 32ff 	mov.w	r2, #4294967295
   e:	605a      	str	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:344
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
  10:	687b      	ldr	r3, [r7, #4]
  12:	f04f 0200 	mov.w	r2, #0
  16:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:345
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
  18:	687b      	ldr	r3, [r7, #4]
  1a:	f04f 0200 	mov.w	r2, #0
  1e:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:346
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  20:	687b      	ldr	r3, [r7, #4]
  22:	f04f 0200 	mov.w	r2, #0
  26:	805a      	strh	r2, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:347
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
  28:	687b      	ldr	r3, [r7, #4]
  2a:	f04f 0200 	mov.w	r2, #0
  2e:	729a      	strb	r2, [r3, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:348
}
  30:	f107 070c 	add.w	r7, r7, #12
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_PrescalerConfig:

00000000 <TIM_PrescalerConfig>:
TIM_PrescalerConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:361
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	803b      	strh	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:366
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
  10:	687b      	ldr	r3, [r7, #4]
  12:	887a      	ldrh	r2, [r7, #2]
  14:	851a      	strh	r2, [r3, #40]	; 0x28
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:368
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
  16:	687b      	ldr	r3, [r7, #4]
  18:	883a      	ldrh	r2, [r7, #0]
  1a:	829a      	strh	r2, [r3, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:369
}
  1c:	f107 070c 	add.w	r7, r7, #12
  20:	46bd      	mov	sp, r7
  22:	bc80      	pop	{r7}
  24:	4770      	bx	lr
  26:	bf00      	nop

Disassembly of section .text.TIM_CounterModeConfig:

00000000 <TIM_CounterModeConfig>:
TIM_CounterModeConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:384
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:385
  uint16_t tmpcr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:391

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:394

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:397

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:400

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:401
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_SetCounter:

00000000 <TIM_SetCounter>:
TIM_SetCounter():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:410
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:415
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	625a      	str	r2, [r3, #36]	; 0x24
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:416
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_SetAutoreload:

00000000 <TIM_SetAutoreload>:
TIM_SetAutoreload():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:425
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:430
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	62da      	str	r2, [r3, #44]	; 0x2c
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:431
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_GetCounter:

00000000 <TIM_GetCounter>:
TIM_GetCounter():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:439
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:444
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
   8:	687b      	ldr	r3, [r7, #4]
   a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:445
}
   c:	4618      	mov	r0, r3
   e:	f107 070c 	add.w	r7, r7, #12
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_GetPrescaler:

00000000 <TIM_GetPrescaler>:
TIM_GetPrescaler():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:453
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:458
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
   8:	687b      	ldr	r3, [r7, #4]
   a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   c:	b29b      	uxth	r3, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:459
}
   e:	4618      	mov	r0, r3
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_UpdateDisableConfig:

00000000 <TIM_UpdateDisableConfig>:
TIM_UpdateDisableConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:469
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:474
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_UpdateDisableConfig+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:477
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0302 	orr.w	r3, r3, #2
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	801a      	strh	r2, [r3, #0]
  22:	e007      	b.n	34 <TIM_UpdateDisableConfig+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:482
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  24:	687b      	ldr	r3, [r7, #4]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0302 	bic.w	r3, r3, #2
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:484
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_UpdateRequestConfig:

00000000 <TIM_UpdateRequestConfig>:
TIM_UpdateRequestConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:498
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:503
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
   c:	887b      	ldrh	r3, [r7, #2]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_UpdateRequestConfig+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:506
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0304 	orr.w	r3, r3, #4
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	801a      	strh	r2, [r3, #0]
  22:	e007      	b.n	34 <TIM_UpdateRequestConfig+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:511
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  24:	687b      	ldr	r3, [r7, #4]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0304 	bic.w	r3, r3, #4
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:513
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_ARRPreloadConfig:

00000000 <TIM_ARRPreloadConfig>:
TIM_ARRPreloadConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:523
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:528
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_ARRPreloadConfig+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:531
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	801a      	strh	r2, [r3, #0]
  22:	e007      	b.n	34 <TIM_ARRPreloadConfig+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:536
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  24:	687b      	ldr	r3, [r7, #4]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:538
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_SelectOnePulseMode:

00000000 <TIM_SelectOnePulseMode>:
TIM_SelectOnePulseMode():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:550
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:556
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
   c:	687b      	ldr	r3, [r7, #4]
   e:	881b      	ldrh	r3, [r3, #0]
  10:	b29b      	uxth	r3, r3
  12:	f023 0308 	bic.w	r3, r3, #8
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:559

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	881b      	ldrh	r3, [r3, #0]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:560
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_SetClockDivision:

00000000 <TIM_SetClockDivision>:
TIM_SetClockDivision():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:573
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:579
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
   c:	687b      	ldr	r3, [r7, #4]
   e:	881b      	ldrh	r3, [r3, #0]
  10:	b29b      	uxth	r3, r3
  12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:582

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	881b      	ldrh	r3, [r3, #0]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:583
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_Cmd:

00000000 <TIM_Cmd>:
TIM_Cmd():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:593
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:598
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_Cmd+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:601
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
  12:	687b      	ldr	r3, [r7, #4]
  14:	881b      	ldrh	r3, [r3, #0]
  16:	b29b      	uxth	r3, r3
  18:	f043 0301 	orr.w	r3, r3, #1
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	801a      	strh	r2, [r3, #0]
  22:	e007      	b.n	34 <TIM_Cmd+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:606
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  24:	687b      	ldr	r3, [r7, #4]
  26:	881b      	ldrh	r3, [r3, #0]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0301 	bic.w	r3, r3, #1
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:608
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_OC1Init:

00000000 <TIM_OC1Init>:
TIM_OC1Init():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:674
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:675
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0
   e:	817b      	strh	r3, [r7, #10]
  10:	f04f 0300 	mov.w	r3, #0
  14:	81fb      	strh	r3, [r7, #14]
  16:	f04f 0300 	mov.w	r3, #0
  1a:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:684
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	f023 0301 	bic.w	r3, r3, #1
  26:	b29a      	uxth	r2, r3
  28:	687b      	ldr	r3, [r7, #4]
  2a:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:687
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	8c1b      	ldrh	r3, [r3, #32]
  30:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:689
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	687b      	ldr	r3, [r7, #4]
  34:	889b      	ldrh	r3, [r3, #4]
  36:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:692
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	8b1b      	ldrh	r3, [r3, #24]
  3c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:695
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
  3e:	897b      	ldrh	r3, [r7, #10]
  40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  44:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:696
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
  46:	897b      	ldrh	r3, [r7, #10]
  48:	f023 0303 	bic.w	r3, r3, #3
  4c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:698
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  4e:	683b      	ldr	r3, [r7, #0]
  50:	881a      	ldrh	r2, [r3, #0]
  52:	897b      	ldrh	r3, [r7, #10]
  54:	ea42 0303 	orr.w	r3, r2, r3
  58:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:701
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  5a:	89fb      	ldrh	r3, [r7, #14]
  5c:	f023 0302 	bic.w	r3, r3, #2
  60:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:703
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  62:	683b      	ldr	r3, [r7, #0]
  64:	899a      	ldrh	r2, [r3, #12]
  66:	89fb      	ldrh	r3, [r7, #14]
  68:	ea42 0303 	orr.w	r3, r2, r3
  6c:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:706
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
  6e:	683b      	ldr	r3, [r7, #0]
  70:	885a      	ldrh	r2, [r3, #2]
  72:	89fb      	ldrh	r3, [r7, #14]
  74:	ea42 0303 	orr.w	r3, r2, r3
  78:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:708
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  7a:	687a      	ldr	r2, [r7, #4]
  7c:	4b20      	ldr	r3, [pc, #128]	; (100 <TIM_OC1Init+0x100>)
  7e:	429a      	cmp	r2, r3
  80:	d003      	beq.n	8a <TIM_OC1Init+0x8a>
  82:	687a      	ldr	r2, [r7, #4]
  84:	4b1f      	ldr	r3, [pc, #124]	; (104 <TIM_OC1Init+0x104>)
  86:	429a      	cmp	r2, r3
  88:	d127      	bne.n	da <TIM_OC1Init+0xda>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:716
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
  8a:	89fb      	ldrh	r3, [r7, #14]
  8c:	f023 0308 	bic.w	r3, r3, #8
  90:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:718
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
  92:	683b      	ldr	r3, [r7, #0]
  94:	89da      	ldrh	r2, [r3, #14]
  96:	89fb      	ldrh	r3, [r7, #14]
  98:	ea42 0303 	orr.w	r3, r2, r3
  9c:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:720
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
  9e:	89fb      	ldrh	r3, [r7, #14]
  a0:	f023 0304 	bic.w	r3, r3, #4
  a4:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:723
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
  a6:	683b      	ldr	r3, [r7, #0]
  a8:	889a      	ldrh	r2, [r3, #4]
  aa:	89fb      	ldrh	r3, [r7, #14]
  ac:	ea42 0303 	orr.w	r3, r2, r3
  b0:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:725
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
  b2:	89bb      	ldrh	r3, [r7, #12]
  b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  b8:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:726
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
  ba:	89bb      	ldrh	r3, [r7, #12]
  bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  c0:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:728
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
  c2:	683b      	ldr	r3, [r7, #0]
  c4:	8a1a      	ldrh	r2, [r3, #16]
  c6:	89bb      	ldrh	r3, [r7, #12]
  c8:	ea42 0303 	orr.w	r3, r2, r3
  cc:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:730
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
  ce:	683b      	ldr	r3, [r7, #0]
  d0:	8a5a      	ldrh	r2, [r3, #18]
  d2:	89bb      	ldrh	r3, [r7, #12]
  d4:	ea42 0303 	orr.w	r3, r2, r3
  d8:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:733
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  da:	687b      	ldr	r3, [r7, #4]
  dc:	89ba      	ldrh	r2, [r7, #12]
  de:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:736
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  e0:	687b      	ldr	r3, [r7, #4]
  e2:	897a      	ldrh	r2, [r7, #10]
  e4:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:739
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
  e6:	683b      	ldr	r3, [r7, #0]
  e8:	689a      	ldr	r2, [r3, #8]
  ea:	687b      	ldr	r3, [r7, #4]
  ec:	635a      	str	r2, [r3, #52]	; 0x34
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:742
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  ee:	687b      	ldr	r3, [r7, #4]
  f0:	89fa      	ldrh	r2, [r7, #14]
  f2:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:743
}
  f4:	f107 0714 	add.w	r7, r7, #20
  f8:	46bd      	mov	sp, r7
  fa:	bc80      	pop	{r7}
  fc:	4770      	bx	lr
  fe:	bf00      	nop
 100:	40010000 	.word	0x40010000
 104:	40010400 	.word	0x40010400

Disassembly of section .text.TIM_OC2Init:

00000000 <TIM_OC2Init>:
TIM_OC2Init():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:755
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:756
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0
   e:	817b      	strh	r3, [r7, #10]
  10:	f04f 0300 	mov.w	r3, #0
  14:	81fb      	strh	r3, [r7, #14]
  16:	f04f 0300 	mov.w	r3, #0
  1a:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:765
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	f023 0310 	bic.w	r3, r3, #16
  26:	b29a      	uxth	r2, r3
  28:	687b      	ldr	r3, [r7, #4]
  2a:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:768
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	8c1b      	ldrh	r3, [r3, #32]
  30:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:770
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	687b      	ldr	r3, [r7, #4]
  34:	889b      	ldrh	r3, [r3, #4]
  36:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:773
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	8b1b      	ldrh	r3, [r3, #24]
  3c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:776
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
  3e:	897b      	ldrh	r3, [r7, #10]
  40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  44:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:777
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
  46:	897b      	ldrh	r3, [r7, #10]
  48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:780
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  4e:	683b      	ldr	r3, [r7, #0]
  50:	881b      	ldrh	r3, [r3, #0]
  52:	ea4f 2303 	mov.w	r3, r3, lsl #8
  56:	b29a      	uxth	r2, r3
  58:	897b      	ldrh	r3, [r7, #10]
  5a:	ea42 0303 	orr.w	r3, r2, r3
  5e:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:783
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  60:	89fb      	ldrh	r3, [r7, #14]
  62:	f023 0320 	bic.w	r3, r3, #32
  66:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:785
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  68:	683b      	ldr	r3, [r7, #0]
  6a:	899b      	ldrh	r3, [r3, #12]
  6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
  70:	b29a      	uxth	r2, r3
  72:	89fb      	ldrh	r3, [r7, #14]
  74:	ea42 0303 	orr.w	r3, r2, r3
  78:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:788
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
  7a:	683b      	ldr	r3, [r7, #0]
  7c:	885b      	ldrh	r3, [r3, #2]
  7e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  82:	b29a      	uxth	r2, r3
  84:	89fb      	ldrh	r3, [r7, #14]
  86:	ea42 0303 	orr.w	r3, r2, r3
  8a:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:790
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  8c:	687a      	ldr	r2, [r7, #4]
  8e:	4b26      	ldr	r3, [pc, #152]	; (128 <TIM_OC2Init+0x128>)
  90:	429a      	cmp	r2, r3
  92:	d003      	beq.n	9c <TIM_OC2Init+0x9c>
  94:	687a      	ldr	r2, [r7, #4]
  96:	4b25      	ldr	r3, [pc, #148]	; (12c <TIM_OC2Init+0x12c>)
  98:	429a      	cmp	r2, r3
  9a:	d133      	bne.n	104 <TIM_OC2Init+0x104>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:798
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
  9c:	89fb      	ldrh	r3, [r7, #14]
  9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  a2:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
  a4:	683b      	ldr	r3, [r7, #0]
  a6:	89db      	ldrh	r3, [r3, #14]
  a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
  ac:	b29a      	uxth	r2, r3
  ae:	89fb      	ldrh	r3, [r7, #14]
  b0:	ea42 0303 	orr.w	r3, r2, r3
  b4:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:802
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
  b6:	89fb      	ldrh	r3, [r7, #14]
  b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  bc:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:805
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
  be:	683b      	ldr	r3, [r7, #0]
  c0:	889b      	ldrh	r3, [r3, #4]
  c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
  c6:	b29a      	uxth	r2, r3
  c8:	89fb      	ldrh	r3, [r7, #14]
  ca:	ea42 0303 	orr.w	r3, r2, r3
  ce:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:807
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
  d0:	89bb      	ldrh	r3, [r7, #12]
  d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  d6:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:808
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
  d8:	89bb      	ldrh	r3, [r7, #12]
  da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  de:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:810
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
  e0:	683b      	ldr	r3, [r7, #0]
  e2:	8a1b      	ldrh	r3, [r3, #16]
  e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
  e8:	b29a      	uxth	r2, r3
  ea:	89bb      	ldrh	r3, [r7, #12]
  ec:	ea42 0303 	orr.w	r3, r2, r3
  f0:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:812
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  f2:	683b      	ldr	r3, [r7, #0]
  f4:	8a5b      	ldrh	r3, [r3, #18]
  f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
  fa:	b29a      	uxth	r2, r3
  fc:	89bb      	ldrh	r3, [r7, #12]
  fe:	ea42 0303 	orr.w	r3, r2, r3
 102:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:815
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 104:	687b      	ldr	r3, [r7, #4]
 106:	89ba      	ldrh	r2, [r7, #12]
 108:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:818
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 10a:	687b      	ldr	r3, [r7, #4]
 10c:	897a      	ldrh	r2, [r7, #10]
 10e:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:821
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 110:	683b      	ldr	r3, [r7, #0]
 112:	689a      	ldr	r2, [r3, #8]
 114:	687b      	ldr	r3, [r7, #4]
 116:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:824
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 118:	687b      	ldr	r3, [r7, #4]
 11a:	89fa      	ldrh	r2, [r7, #14]
 11c:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:825
}
 11e:	f107 0714 	add.w	r7, r7, #20
 122:	46bd      	mov	sp, r7
 124:	bc80      	pop	{r7}
 126:	4770      	bx	lr
 128:	40010000 	.word	0x40010000
 12c:	40010400 	.word	0x40010400

Disassembly of section .text.TIM_OC3Init:

00000000 <TIM_OC3Init>:
TIM_OC3Init():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:836
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b085b480 	.word	0xb085b480
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:837
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0
   e:	817b      	strh	r3, [r7, #10]
  10:	f04f 0300 	mov.w	r3, #0
  14:	81fb      	strh	r3, [r7, #14]
  16:	f04f 0300 	mov.w	r3, #0
  1a:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:846
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  26:	b29a      	uxth	r2, r3
  28:	687b      	ldr	r3, [r7, #4]
  2a:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:849
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	8c1b      	ldrh	r3, [r3, #32]
  30:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:851
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	687b      	ldr	r3, [r7, #4]
  34:	889b      	ldrh	r3, [r3, #4]
  36:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:854
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	8b9b      	ldrh	r3, [r3, #28]
  3c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:857
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  3e:	897b      	ldrh	r3, [r7, #10]
  40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  44:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:858
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  46:	897b      	ldrh	r3, [r7, #10]
  48:	f023 0303 	bic.w	r3, r3, #3
  4c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:860
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  4e:	683b      	ldr	r3, [r7, #0]
  50:	881a      	ldrh	r2, [r3, #0]
  52:	897b      	ldrh	r3, [r7, #10]
  54:	ea42 0303 	orr.w	r3, r2, r3
  58:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:863
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  5a:	89fb      	ldrh	r3, [r7, #14]
  5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  60:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:865
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  62:	683b      	ldr	r3, [r7, #0]
  64:	899b      	ldrh	r3, [r3, #12]
  66:	ea4f 2303 	mov.w	r3, r3, lsl #8
  6a:	b29a      	uxth	r2, r3
  6c:	89fb      	ldrh	r3, [r7, #14]
  6e:	ea42 0303 	orr.w	r3, r2, r3
  72:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:868
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
  74:	683b      	ldr	r3, [r7, #0]
  76:	885b      	ldrh	r3, [r3, #2]
  78:	ea4f 2303 	mov.w	r3, r3, lsl #8
  7c:	b29a      	uxth	r2, r3
  7e:	89fb      	ldrh	r3, [r7, #14]
  80:	ea42 0303 	orr.w	r3, r2, r3
  84:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:870
    
  if((TIMx == TIM1) || (TIMx == TIM8))
  86:	687a      	ldr	r2, [r7, #4]
  88:	4b26      	ldr	r3, [pc, #152]	; (124 <TIM_OC3Init+0x124>)
  8a:	429a      	cmp	r2, r3
  8c:	d003      	beq.n	96 <TIM_OC3Init+0x96>
  8e:	687a      	ldr	r2, [r7, #4]
  90:	4b25      	ldr	r3, [pc, #148]	; (128 <TIM_OC3Init+0x128>)
  92:	429a      	cmp	r2, r3
  94:	d133      	bne.n	fe <TIM_OC3Init+0xfe>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:878
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
  96:	89fb      	ldrh	r3, [r7, #14]
  98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  9c:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:880
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
  9e:	683b      	ldr	r3, [r7, #0]
  a0:	89db      	ldrh	r3, [r3, #14]
  a2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  a6:	b29a      	uxth	r2, r3
  a8:	89fb      	ldrh	r3, [r7, #14]
  aa:	ea42 0303 	orr.w	r3, r2, r3
  ae:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:882
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
  b0:	89fb      	ldrh	r3, [r7, #14]
  b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  b6:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:885
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
  b8:	683b      	ldr	r3, [r7, #0]
  ba:	889b      	ldrh	r3, [r3, #4]
  bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
  c0:	b29a      	uxth	r2, r3
  c2:	89fb      	ldrh	r3, [r7, #14]
  c4:	ea42 0303 	orr.w	r3, r2, r3
  c8:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:887
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
  ca:	89bb      	ldrh	r3, [r7, #12]
  cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  d0:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:888
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
  d2:	89bb      	ldrh	r3, [r7, #12]
  d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  d8:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:890
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
  da:	683b      	ldr	r3, [r7, #0]
  dc:	8a1b      	ldrh	r3, [r3, #16]
  de:	ea4f 1303 	mov.w	r3, r3, lsl #4
  e2:	b29a      	uxth	r2, r3
  e4:	89bb      	ldrh	r3, [r7, #12]
  e6:	ea42 0303 	orr.w	r3, r2, r3
  ea:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:892
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  ec:	683b      	ldr	r3, [r7, #0]
  ee:	8a5b      	ldrh	r3, [r3, #18]
  f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
  f4:	b29a      	uxth	r2, r3
  f6:	89bb      	ldrh	r3, [r7, #12]
  f8:	ea42 0303 	orr.w	r3, r2, r3
  fc:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:895
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  fe:	687b      	ldr	r3, [r7, #4]
 100:	89ba      	ldrh	r2, [r7, #12]
 102:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:898
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 104:	687b      	ldr	r3, [r7, #4]
 106:	897a      	ldrh	r2, [r7, #10]
 108:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:901
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 10a:	683b      	ldr	r3, [r7, #0]
 10c:	689a      	ldr	r2, [r3, #8]
 10e:	687b      	ldr	r3, [r7, #4]
 110:	63da      	str	r2, [r3, #60]	; 0x3c
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:904
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 112:	687b      	ldr	r3, [r7, #4]
 114:	89fa      	ldrh	r2, [r7, #14]
 116:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:905
}
 118:	f107 0714 	add.w	r7, r7, #20
 11c:	46bd      	mov	sp, r7
 11e:	bc80      	pop	{r7}
 120:	4770      	bx	lr
 122:	bf00      	nop
 124:	40010000 	.word	0x40010000
 128:	40010400 	.word	0x40010400

Disassembly of section .text.TIM_OC4Init:

00000000 <TIM_OC4Init>:
TIM_OC4Init():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:916
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b085b480 	.word	0xb085b480
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:917
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
   a:	f04f 0300 	mov.w	r3, #0
   e:	81bb      	strh	r3, [r7, #12]
  10:	f04f 0300 	mov.w	r3, #0
  14:	817b      	strh	r3, [r7, #10]
  16:	f04f 0300 	mov.w	r3, #0
  1a:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:926
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8c1b      	ldrh	r3, [r3, #32]
  20:	b29b      	uxth	r3, r3
  22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  26:	b29a      	uxth	r2, r3
  28:	687b      	ldr	r3, [r7, #4]
  2a:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:929
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	8c1b      	ldrh	r3, [r3, #32]
  30:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:931
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  32:	687b      	ldr	r3, [r7, #4]
  34:	889b      	ldrh	r3, [r3, #4]
  36:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:934
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	8b9b      	ldrh	r3, [r3, #28]
  3c:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:937
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
  3e:	89bb      	ldrh	r3, [r7, #12]
  40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  44:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:938
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
  46:	89bb      	ldrh	r3, [r7, #12]
  48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4c:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:941
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  4e:	683b      	ldr	r3, [r7, #0]
  50:	881b      	ldrh	r3, [r3, #0]
  52:	ea4f 2303 	mov.w	r3, r3, lsl #8
  56:	b29a      	uxth	r2, r3
  58:	89bb      	ldrh	r3, [r7, #12]
  5a:	ea42 0303 	orr.w	r3, r2, r3
  5e:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:944
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  60:	897b      	ldrh	r3, [r7, #10]
  62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  66:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:946
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
  68:	683b      	ldr	r3, [r7, #0]
  6a:	899b      	ldrh	r3, [r3, #12]
  6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  70:	b29a      	uxth	r2, r3
  72:	897b      	ldrh	r3, [r7, #10]
  74:	ea42 0303 	orr.w	r3, r2, r3
  78:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:949
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
  7a:	683b      	ldr	r3, [r7, #0]
  7c:	885b      	ldrh	r3, [r3, #2]
  7e:	ea4f 3303 	mov.w	r3, r3, lsl #12
  82:	b29a      	uxth	r2, r3
  84:	897b      	ldrh	r3, [r7, #10]
  86:	ea42 0303 	orr.w	r3, r2, r3
  8a:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:951
  
  if((TIMx == TIM1) || (TIMx == TIM8))
  8c:	687a      	ldr	r2, [r7, #4]
  8e:	4b13      	ldr	r3, [pc, #76]	; (dc <TIM_OC4Init+0xdc>)
  90:	429a      	cmp	r2, r3
  92:	d003      	beq.n	9c <TIM_OC4Init+0x9c>
  94:	687a      	ldr	r2, [r7, #4]
  96:	4b12      	ldr	r3, [pc, #72]	; (e0 <TIM_OC4Init+0xe0>)
  98:	429a      	cmp	r2, r3
  9a:	d10c      	bne.n	b6 <TIM_OC4Init+0xb6>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:955
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
  9c:	89fb      	ldrh	r3, [r7, #14]
  9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  a2:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:957
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  a4:	683b      	ldr	r3, [r7, #0]
  a6:	8a1b      	ldrh	r3, [r3, #16]
  a8:	ea4f 1383 	mov.w	r3, r3, lsl #6
  ac:	b29a      	uxth	r2, r3
  ae:	89fb      	ldrh	r3, [r7, #14]
  b0:	ea42 0303 	orr.w	r3, r2, r3
  b4:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:960
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  b6:	687b      	ldr	r3, [r7, #4]
  b8:	89fa      	ldrh	r2, [r7, #14]
  ba:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:963
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
  bc:	687b      	ldr	r3, [r7, #4]
  be:	89ba      	ldrh	r2, [r7, #12]
  c0:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:966
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
  c2:	683b      	ldr	r3, [r7, #0]
  c4:	689a      	ldr	r2, [r3, #8]
  c6:	687b      	ldr	r3, [r7, #4]
  c8:	641a      	str	r2, [r3, #64]	; 0x40
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:969
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  ca:	687b      	ldr	r3, [r7, #4]
  cc:	897a      	ldrh	r2, [r7, #10]
  ce:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:970
}
  d0:	f107 0714 	add.w	r7, r7, #20
  d4:	46bd      	mov	sp, r7
  d6:	bc80      	pop	{r7}
  d8:	4770      	bx	lr
  da:	bf00      	nop
  dc:	40010000 	.word	0x40010000
  e0:	40010400 	.word	0x40010400

Disassembly of section .text.TIM_OCStructInit:

00000000 <TIM_OCStructInit>:
TIM_OCStructInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:979
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:981
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
   8:	687b      	ldr	r3, [r7, #4]
   a:	f04f 0200 	mov.w	r2, #0
   e:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:982
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
  10:	687b      	ldr	r3, [r7, #4]
  12:	f04f 0200 	mov.w	r2, #0
  16:	805a      	strh	r2, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:983
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
  18:	687b      	ldr	r3, [r7, #4]
  1a:	f04f 0200 	mov.w	r2, #0
  1e:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:984
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
  20:	687b      	ldr	r3, [r7, #4]
  22:	f04f 0200 	mov.w	r2, #0
  26:	609a      	str	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:985
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
  28:	687b      	ldr	r3, [r7, #4]
  2a:	f04f 0200 	mov.w	r2, #0
  2e:	819a      	strh	r2, [r3, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:986
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
  30:	687b      	ldr	r3, [r7, #4]
  32:	f04f 0200 	mov.w	r2, #0
  36:	81da      	strh	r2, [r3, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:987
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	f04f 0200 	mov.w	r2, #0
  3e:	821a      	strh	r2, [r3, #16]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:988
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
  40:	687b      	ldr	r3, [r7, #4]
  42:	f04f 0200 	mov.w	r2, #0
  46:	825a      	strh	r2, [r3, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:989
}
  48:	f107 070c 	add.w	r7, r7, #12
  4c:	46bd      	mov	sp, r7
  4e:	bc80      	pop	{r7}
  50:	4770      	bx	lr
  52:	bf00      	nop

Disassembly of section .text.TIM_SelectOCxM:

00000000 <TIM_SelectOCxM>:
TIM_SelectOCxM():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1015
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	803b      	strh	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1016
  uint32_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0
  14:	60fb      	str	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1017
  uint16_t tmp1 = 0;
  16:	f04f 0300 	mov.w	r3, #0
  1a:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1024
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	60fb      	str	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1025
  tmp += CCMR_OFFSET;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	f103 0318 	add.w	r3, r3, #24
  26:	60fb      	str	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1027

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
  28:	887b      	ldrh	r3, [r7, #2]
  2a:	f04f 0201 	mov.w	r2, #1
  2e:	fa02 f303 	lsl.w	r3, r2, r3
  32:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1030

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
  34:	687b      	ldr	r3, [r7, #4]
  36:	8c1b      	ldrh	r3, [r3, #32]
  38:	b29a      	uxth	r2, r3
  3a:	897b      	ldrh	r3, [r7, #10]
  3c:	ea6f 0303 	mvn.w	r3, r3
  40:	b29b      	uxth	r3, r3
  42:	ea02 0303 	and.w	r3, r2, r3
  46:	b29a      	uxth	r2, r3
  48:	687b      	ldr	r3, [r7, #4]
  4a:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1032

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  4c:	887b      	ldrh	r3, [r7, #2]
  4e:	2b00      	cmp	r3, #0
  50:	d002      	beq.n	58 <TIM_SelectOCxM+0x58>
  52:	887b      	ldrh	r3, [r7, #2]
  54:	2b08      	cmp	r3, #8
  56:	d116      	bne.n	86 <TIM_SelectOCxM+0x86>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1034
  {
    tmp += (TIM_Channel>>1);
  58:	887b      	ldrh	r3, [r7, #2]
  5a:	ea4f 0353 	mov.w	r3, r3, lsr #1
  5e:	b29b      	uxth	r3, r3
  60:	68fa      	ldr	r2, [r7, #12]
  62:	18d3      	adds	r3, r2, r3
  64:	60fb      	str	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1037

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
  66:	68fa      	ldr	r2, [r7, #12]
  68:	68fb      	ldr	r3, [r7, #12]
  6a:	6819      	ldr	r1, [r3, #0]
  6c:	f64f 738f 	movw	r3, #65423	; 0xff8f
  70:	ea01 0303 	and.w	r3, r1, r3
  74:	6013      	str	r3, [r2, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1040
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  76:	68fb      	ldr	r3, [r7, #12]
  78:	68fa      	ldr	r2, [r7, #12]
  7a:	6811      	ldr	r1, [r2, #0]
  7c:	883a      	ldrh	r2, [r7, #0]
  7e:	ea41 0202 	orr.w	r2, r1, r2
  82:	601a      	str	r2, [r3, #0]
  84:	e01b      	b.n	be <TIM_SelectOCxM+0xbe>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1044
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
  86:	887b      	ldrh	r3, [r7, #2]
  88:	f1a3 0304 	sub.w	r3, r3, #4
  8c:	b29b      	uxth	r3, r3
  8e:	ea4f 0353 	mov.w	r3, r3, lsr #1
  92:	b29b      	uxth	r3, r3
  94:	68fa      	ldr	r2, [r7, #12]
  96:	18d3      	adds	r3, r2, r3
  98:	60fb      	str	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1047

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
  9a:	68fa      	ldr	r2, [r7, #12]
  9c:	68fb      	ldr	r3, [r7, #12]
  9e:	6819      	ldr	r1, [r3, #0]
  a0:	f648 73ff 	movw	r3, #36863	; 0x8fff
  a4:	ea01 0303 	and.w	r3, r1, r3
  a8:	6013      	str	r3, [r2, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1050
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
  aa:	68fb      	ldr	r3, [r7, #12]
  ac:	68fa      	ldr	r2, [r7, #12]
  ae:	6811      	ldr	r1, [r2, #0]
  b0:	883a      	ldrh	r2, [r7, #0]
  b2:	ea4f 2202 	mov.w	r2, r2, lsl #8
  b6:	b292      	uxth	r2, r2
  b8:	ea41 0202 	orr.w	r2, r1, r2
  bc:	601a      	str	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1052
  }
}
  be:	f107 0714 	add.w	r7, r7, #20
  c2:	46bd      	mov	sp, r7
  c4:	bc80      	pop	{r7}
  c6:	4770      	bx	lr

Disassembly of section .text.TIM_SetCompare1:

00000000 <TIM_SetCompare1>:
TIM_SetCompare1():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1061
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1066
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	635a      	str	r2, [r3, #52]	; 0x34
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1067
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_SetCompare2:

00000000 <TIM_SetCompare2>:
TIM_SetCompare2():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1077
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1082
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	639a      	str	r2, [r3, #56]	; 0x38
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1083
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_SetCompare3:

00000000 <TIM_SetCompare3>:
TIM_SetCompare3():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1092
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1097
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	63da      	str	r2, [r3, #60]	; 0x3c
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1098
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_SetCompare4:

00000000 <TIM_SetCompare4>:
TIM_SetCompare4():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1107
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1112
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
   a:	687b      	ldr	r3, [r7, #4]
   c:	683a      	ldr	r2, [r7, #0]
   e:	641a      	str	r2, [r3, #64]	; 0x40
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1113
}
  10:	f107 070c 	add.w	r7, r7, #12
  14:	46bd      	mov	sp, r7
  16:	bc80      	pop	{r7}
  18:	4770      	bx	lr
  1a:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC1Config:

00000000 <TIM_ForcedOC1Config>:
TIM_ForcedOC1Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1125
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1126
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1131

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1134

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1137

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1140

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1141
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC2Config:

00000000 <TIM_ForcedOC2Config>:
TIM_ForcedOC2Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1154
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1155
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1160

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1163

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1166

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1169

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1170
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_ForcedOC3Config:

00000000 <TIM_ForcedOC3Config>:
TIM_ForcedOC3Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1182
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1183
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1189

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1192

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1195

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1198

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1199
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_ForcedOC4Config:

00000000 <TIM_ForcedOC4Config>:
TIM_ForcedOC4Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1211
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1212
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1217

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1220

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1223

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1226

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1227
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PreloadConfig:

00000000 <TIM_OC1PreloadConfig>:
TIM_OC1PreloadConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1239
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1240
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1246

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1249

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1252

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1255

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1256
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC2PreloadConfig:

00000000 <TIM_OC2PreloadConfig>:
TIM_OC2PreloadConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1269
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1270
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1276

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1279

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1282

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1285

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1286
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PreloadConfig:

00000000 <TIM_OC3PreloadConfig>:
TIM_OC3PreloadConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1298
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1299
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1305

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1308

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1311

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1314

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1315
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC4PreloadConfig:

00000000 <TIM_OC4PreloadConfig>:
TIM_OC4PreloadConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1327
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1328
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1334

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1337

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1340

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1343

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1344
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC1FastConfig:

00000000 <TIM_OC1FastConfig>:
TIM_OC1FastConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1356
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1357
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1364
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1367

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0304 	bic.w	r3, r3, #4
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1370

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1373

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1374
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC2FastConfig:

00000000 <TIM_OC2FastConfig>:
TIM_OC2FastConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1387
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1388
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1395
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1398

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1401

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1404

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1405
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC3FastConfig:

00000000 <TIM_OC3FastConfig>:
TIM_OC3FastConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1417
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1418
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1425
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1428

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0304 	bic.w	r3, r3, #4
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1431

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1434

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1435
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC4FastConfig:

00000000 <TIM_OC4FastConfig>:
TIM_OC4FastConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1447
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1448
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1455
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1458

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1461

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1464

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1465
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC1Ref:

00000000 <TIM_ClearOC1Ref>:
TIM_ClearOC1Ref():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1477
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1478
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1484

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1487

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1490

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1493

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1494
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_ClearOC2Ref:

00000000 <TIM_ClearOC2Ref>:
TIM_ClearOC2Ref():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1507
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1508
  uint16_t tmpccmr1 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1514

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b1b      	ldrh	r3, [r3, #24]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1517

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1520

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea4f 2303 	mov.w	r3, r3, lsl #8
  2a:	b29a      	uxth	r2, r3
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	ea42 0303 	orr.w	r3, r2, r3
  32:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1523

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
  34:	687b      	ldr	r3, [r7, #4]
  36:	89fa      	ldrh	r2, [r7, #14]
  38:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1524
}
  3a:	f107 0714 	add.w	r7, r7, #20
  3e:	46bd      	mov	sp, r7
  40:	bc80      	pop	{r7}
  42:	4770      	bx	lr

Disassembly of section .text.TIM_ClearOC3Ref:

00000000 <TIM_ClearOC3Ref>:
TIM_ClearOC3Ref():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1536
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1537
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1543

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1546

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1549

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1552

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1553
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_ClearOC4Ref:

00000000 <TIM_ClearOC4Ref>:
TIM_ClearOC4Ref():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1565
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1566
  uint16_t tmpccmr2 = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1572

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8b9b      	ldrh	r3, [r3, #28]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1575

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  1e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  22:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1578

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea4f 2303 	mov.w	r3, r3, lsl #8
  2a:	b29a      	uxth	r2, r3
  2c:	89fb      	ldrh	r3, [r7, #14]
  2e:	ea42 0303 	orr.w	r3, r2, r3
  32:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1581

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
  34:	687b      	ldr	r3, [r7, #4]
  36:	89fa      	ldrh	r2, [r7, #14]
  38:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1582
}
  3a:	f107 0714 	add.w	r7, r7, #20
  3e:	46bd      	mov	sp, r7
  40:	bc80      	pop	{r7}
  42:	4770      	bx	lr

Disassembly of section .text.TIM_OC1PolarityConfig:

00000000 <TIM_OC1PolarityConfig>:
TIM_OC1PolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1594
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1595
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1601

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1604

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0302 	bic.w	r3, r3, #2
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1605
  tmpccer |= TIM_OCPolarity;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1608

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1609
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC1NPolarityConfig:

00000000 <TIM_OC1NPolarityConfig>:
TIM_OC1NPolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1621
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1622
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1627
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1630

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0308 	bic.w	r3, r3, #8
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1631
  tmpccer |= TIM_OCNPolarity;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1634

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1635
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_OC2PolarityConfig:

00000000 <TIM_OC2PolarityConfig>:
TIM_OC2PolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1648
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1649
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1655

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1658

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0320 	bic.w	r3, r3, #32
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1659
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 1303 	mov.w	r3, r3, lsl #4
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1662

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1663
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC2NPolarityConfig:

00000000 <TIM_OC2NPolarityConfig>:
TIM_OC2NPolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1675
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1676
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1682

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1685

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1686
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 1303 	mov.w	r3, r3, lsl #4
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1689

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1690
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC3PolarityConfig:

00000000 <TIM_OC3PolarityConfig>:
TIM_OC3PolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1702
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1703
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1709

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1712

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1713
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1716

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1717
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC3NPolarityConfig:

00000000 <TIM_OC3NPolarityConfig>:
TIM_OC3NPolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1729
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1730
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1736
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1739

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1740
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 2303 	mov.w	r3, r3, lsl #8
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1743

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1744
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_OC4PolarityConfig:

00000000 <TIM_OC4PolarityConfig>:
TIM_OC4PolarityConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1756
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1757
  uint16_t tmpccer = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1763

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
  12:	687b      	ldr	r3, [r7, #4]
  14:	8c1b      	ldrh	r3, [r3, #32]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1766

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1767
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
  20:	887b      	ldrh	r3, [r7, #2]
  22:	ea4f 3303 	mov.w	r3, r3, lsl #12
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1770

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
  30:	687b      	ldr	r3, [r7, #4]
  32:	89fa      	ldrh	r2, [r7, #14]
  34:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1771
}
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_CCxCmd:

00000000 <TIM_CCxCmd>:
TIM_CCxCmd():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1787
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	803b      	strh	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1788
  uint16_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0
  14:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1795
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
  16:	887b      	ldrh	r3, [r7, #2]
  18:	f04f 0201 	mov.w	r2, #1
  1c:	fa02 f303 	lsl.w	r3, r2, r3
  20:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1798

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
  22:	687b      	ldr	r3, [r7, #4]
  24:	8c1b      	ldrh	r3, [r3, #32]
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea6f 0303 	mvn.w	r3, r3
  2e:	b29b      	uxth	r3, r3
  30:	ea02 0303 	and.w	r3, r2, r3
  34:	b29a      	uxth	r2, r3
  36:	687b      	ldr	r3, [r7, #4]
  38:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1801

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
  3a:	687b      	ldr	r3, [r7, #4]
  3c:	8c1b      	ldrh	r3, [r3, #32]
  3e:	b29a      	uxth	r2, r3
  40:	8839      	ldrh	r1, [r7, #0]
  42:	887b      	ldrh	r3, [r7, #2]
  44:	fa01 f303 	lsl.w	r3, r1, r3
  48:	b29b      	uxth	r3, r3
  4a:	ea42 0303 	orr.w	r3, r2, r3
  4e:	b29a      	uxth	r2, r3
  50:	687b      	ldr	r3, [r7, #4]
  52:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1802
}
  54:	f107 0714 	add.w	r7, r7, #20
  58:	46bd      	mov	sp, r7
  5a:	bc80      	pop	{r7}
  5c:	4770      	bx	lr
  5e:	bf00      	nop

Disassembly of section .text.TIM_CCxNCmd:

00000000 <TIM_CCxNCmd>:
TIM_CCxNCmd():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1817
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	803b      	strh	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1818
  uint16_t tmp = 0;
  10:	f04f 0300 	mov.w	r3, #0
  14:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1825
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
  16:	887b      	ldrh	r3, [r7, #2]
  18:	f04f 0204 	mov.w	r2, #4
  1c:	fa02 f303 	lsl.w	r3, r2, r3
  20:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1828

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
  22:	687b      	ldr	r3, [r7, #4]
  24:	8c1b      	ldrh	r3, [r3, #32]
  26:	b29a      	uxth	r2, r3
  28:	89fb      	ldrh	r3, [r7, #14]
  2a:	ea6f 0303 	mvn.w	r3, r3
  2e:	b29b      	uxth	r3, r3
  30:	ea02 0303 	and.w	r3, r2, r3
  34:	b29a      	uxth	r2, r3
  36:	687b      	ldr	r3, [r7, #4]
  38:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1831

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
  3a:	687b      	ldr	r3, [r7, #4]
  3c:	8c1b      	ldrh	r3, [r3, #32]
  3e:	b29a      	uxth	r2, r3
  40:	8839      	ldrh	r1, [r7, #0]
  42:	887b      	ldrh	r3, [r7, #2]
  44:	fa01 f303 	lsl.w	r3, r1, r3
  48:	b29b      	uxth	r3, r3
  4a:	ea42 0303 	orr.w	r3, r2, r3
  4e:	b29a      	uxth	r2, r3
  50:	687b      	ldr	r3, [r7, #4]
  52:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1832
}
  54:	f107 0714 	add.w	r7, r7, #20
  58:	46bd      	mov	sp, r7
  5a:	bc80      	pop	{r7}
  5c:	4770      	bx	lr
  5e:	bf00      	nop

Disassembly of section .text.TIM_ICInit:

00000000 <TIM_ICInit>:
TIM_ICInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1901
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1909
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
   a:	683b      	ldr	r3, [r7, #0]
   c:	881b      	ldrh	r3, [r3, #0]
   e:	2b00      	cmp	r3, #0
  10:	d10f      	bne.n	32 <TIM_ICInit+0x32>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1912
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  12:	683b      	ldr	r3, [r7, #0]
  14:	8859      	ldrh	r1, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1913
               TIM_ICInitStruct->TIM_ICSelection,
  16:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1912
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  18:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1914
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
  1a:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1912
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  1c:	891b      	ldrh	r3, [r3, #8]
  1e:	6878      	ldr	r0, [r7, #4]
  20:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1916
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  24:	683b      	ldr	r3, [r7, #0]
  26:	88db      	ldrh	r3, [r3, #6]
  28:	6878      	ldr	r0, [r7, #4]
  2a:	4619      	mov	r1, r3
  2c:	f7ff fffe 	bl	0 <TIM_ICInit>
  30:	e036      	b.n	a0 <TIM_ICInit+0xa0>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1918
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  32:	683b      	ldr	r3, [r7, #0]
  34:	881b      	ldrh	r3, [r3, #0]
  36:	2b04      	cmp	r3, #4
  38:	d10f      	bne.n	5a <TIM_ICInit+0x5a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1922
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  3a:	683b      	ldr	r3, [r7, #0]
  3c:	8859      	ldrh	r1, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1923
               TIM_ICInitStruct->TIM_ICSelection,
  3e:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1922
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  40:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1924
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
  42:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1922
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  44:	891b      	ldrh	r3, [r3, #8]
  46:	6878      	ldr	r0, [r7, #4]
  48:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1926
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  4c:	683b      	ldr	r3, [r7, #0]
  4e:	88db      	ldrh	r3, [r3, #6]
  50:	6878      	ldr	r0, [r7, #4]
  52:	4619      	mov	r1, r3
  54:	f7ff fffe 	bl	0 <TIM_ICInit>
  58:	e022      	b.n	a0 <TIM_ICInit+0xa0>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1928
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  5a:	683b      	ldr	r3, [r7, #0]
  5c:	881b      	ldrh	r3, [r3, #0]
  5e:	2b08      	cmp	r3, #8
  60:	d10f      	bne.n	82 <TIM_ICInit+0x82>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1932
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  62:	683b      	ldr	r3, [r7, #0]
  64:	8859      	ldrh	r1, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1933
               TIM_ICInitStruct->TIM_ICSelection,
  66:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1932
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  68:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1934
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
  6a:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1932
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
  6c:	891b      	ldrh	r3, [r3, #8]
  6e:	6878      	ldr	r0, [r7, #4]
  70:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1936
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  74:	683b      	ldr	r3, [r7, #0]
  76:	88db      	ldrh	r3, [r3, #6]
  78:	6878      	ldr	r0, [r7, #4]
  7a:	4619      	mov	r1, r3
  7c:	f7ff fffe 	bl	0 <TIM_ICInit>
  80:	e00e      	b.n	a0 <TIM_ICInit+0xa0>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1942
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  82:	683b      	ldr	r3, [r7, #0]
  84:	8859      	ldrh	r1, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1943
               TIM_ICInitStruct->TIM_ICSelection,
  86:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1942
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  88:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1944
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
  8a:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1942
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
  8c:	891b      	ldrh	r3, [r3, #8]
  8e:	6878      	ldr	r0, [r7, #4]
  90:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1946
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  94:	683b      	ldr	r3, [r7, #0]
  96:	88db      	ldrh	r3, [r3, #6]
  98:	6878      	ldr	r0, [r7, #4]
  9a:	4619      	mov	r1, r3
  9c:	f7ff fffe 	bl	0 <TIM_ICInit>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1948
  }
}
  a0:	f107 0708 	add.w	r7, r7, #8
  a4:	46bd      	mov	sp, r7
  a6:	bd80      	pop	{r7, pc}

Disassembly of section .text.TIM_ICStructInit:

00000000 <TIM_ICStructInit>:
TIM_ICStructInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1957
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1959
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
   8:	687b      	ldr	r3, [r7, #4]
   a:	f04f 0200 	mov.w	r2, #0
   e:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1960
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  10:	687b      	ldr	r3, [r7, #4]
  12:	f04f 0200 	mov.w	r2, #0
  16:	805a      	strh	r2, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1961
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
  18:	687b      	ldr	r3, [r7, #4]
  1a:	f04f 0201 	mov.w	r2, #1
  1e:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1962
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
  20:	687b      	ldr	r3, [r7, #4]
  22:	f04f 0200 	mov.w	r2, #0
  26:	80da      	strh	r2, [r3, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1963
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
  28:	687b      	ldr	r3, [r7, #4]
  2a:	f04f 0200 	mov.w	r2, #0
  2e:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1964
}
  30:	f107 070c 	add.w	r7, r7, #12
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_PWMIConfig:

00000000 <TIM_PWMIConfig>:
TIM_PWMIConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1976
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1977
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
   a:	f04f 0300 	mov.w	r3, #0
   e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1978
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  10:	f04f 0301 	mov.w	r3, #1
  14:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1984

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
  16:	683b      	ldr	r3, [r7, #0]
  18:	885b      	ldrh	r3, [r3, #2]
  1a:	2b00      	cmp	r3, #0
  1c:	d103      	bne.n	26 <TIM_PWMIConfig+0x26>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1986
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
  1e:	f04f 0302 	mov.w	r3, #2
  22:	81fb      	strh	r3, [r7, #14]
  24:	e002      	b.n	2c <TIM_PWMIConfig+0x2c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1990
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  26:	f04f 0300 	mov.w	r3, #0
  2a:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1993
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
  2c:	683b      	ldr	r3, [r7, #0]
  2e:	889b      	ldrh	r3, [r3, #4]
  30:	2b01      	cmp	r3, #1
  32:	d103      	bne.n	3c <TIM_PWMIConfig+0x3c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1995
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
  34:	f04f 0302 	mov.w	r3, #2
  38:	81bb      	strh	r3, [r7, #12]
  3a:	e002      	b.n	42 <TIM_PWMIConfig+0x42>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:1999
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  3c:	f04f 0301 	mov.w	r3, #1
  40:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2001
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  42:	683b      	ldr	r3, [r7, #0]
  44:	881b      	ldrh	r3, [r3, #0]
  46:	2b00      	cmp	r3, #0
  48:	d11c      	bne.n	84 <TIM_PWMIConfig+0x84>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2004
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  4a:	683b      	ldr	r3, [r7, #0]
  4c:	8859      	ldrh	r1, [r3, #2]
  4e:	683b      	ldr	r3, [r7, #0]
  50:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2005
               TIM_ICInitStruct->TIM_ICFilter);
  52:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2004
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  54:	891b      	ldrh	r3, [r3, #8]
  56:	6878      	ldr	r0, [r7, #4]
  58:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2007
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  5c:	683b      	ldr	r3, [r7, #0]
  5e:	88db      	ldrh	r3, [r3, #6]
  60:	6878      	ldr	r0, [r7, #4]
  62:	4619      	mov	r1, r3
  64:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2009
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  68:	683b      	ldr	r3, [r7, #0]
  6a:	891b      	ldrh	r3, [r3, #8]
  6c:	89f9      	ldrh	r1, [r7, #14]
  6e:	89ba      	ldrh	r2, [r7, #12]
  70:	6878      	ldr	r0, [r7, #4]
  72:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2011
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  76:	683b      	ldr	r3, [r7, #0]
  78:	88db      	ldrh	r3, [r3, #6]
  7a:	6878      	ldr	r0, [r7, #4]
  7c:	4619      	mov	r1, r3
  7e:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
  82:	e01b      	b.n	bc <TIM_PWMIConfig+0xbc>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2016
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  84:	683b      	ldr	r3, [r7, #0]
  86:	8859      	ldrh	r1, [r3, #2]
  88:	683b      	ldr	r3, [r7, #0]
  8a:	889a      	ldrh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2017
               TIM_ICInitStruct->TIM_ICFilter);
  8c:	683b      	ldr	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2016
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
  8e:	891b      	ldrh	r3, [r3, #8]
  90:	6878      	ldr	r0, [r7, #4]
  92:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2019
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  96:	683b      	ldr	r3, [r7, #0]
  98:	88db      	ldrh	r3, [r3, #6]
  9a:	6878      	ldr	r0, [r7, #4]
  9c:	4619      	mov	r1, r3
  9e:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2021
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
  a2:	683b      	ldr	r3, [r7, #0]
  a4:	891b      	ldrh	r3, [r3, #8]
  a6:	89f9      	ldrh	r1, [r7, #14]
  a8:	89ba      	ldrh	r2, [r7, #12]
  aa:	6878      	ldr	r0, [r7, #4]
  ac:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2023
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  b0:	683b      	ldr	r3, [r7, #0]
  b2:	88db      	ldrh	r3, [r3, #6]
  b4:	6878      	ldr	r0, [r7, #4]
  b6:	4619      	mov	r1, r3
  b8:	f7ff fffe 	bl	0 <TIM_PWMIConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2025
  }
}
  bc:	f107 0710 	add.w	r7, r7, #16
  c0:	46bd      	mov	sp, r7
  c2:	bd80      	pop	{r7, pc}

Disassembly of section .text.TIM_GetCapture1:

00000000 <TIM_GetCapture1>:
TIM_GetCapture1():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2033
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2038
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
   8:	687b      	ldr	r3, [r7, #4]
   a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2039
}
   c:	4618      	mov	r0, r3
   e:	f107 070c 	add.w	r7, r7, #12
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture2:

00000000 <TIM_GetCapture2>:
TIM_GetCapture2():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2048
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2053
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
   8:	687b      	ldr	r3, [r7, #4]
   a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2054
}
   c:	4618      	mov	r0, r3
   e:	f107 070c 	add.w	r7, r7, #12
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture3:

00000000 <TIM_GetCapture3>:
TIM_GetCapture3():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2062
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2067
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
   8:	687b      	ldr	r3, [r7, #4]
   a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2068
}
   c:	4618      	mov	r0, r3
   e:	f107 070c 	add.w	r7, r7, #12
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_GetCapture4:

00000000 <TIM_GetCapture4>:
TIM_GetCapture4():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2076
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2081
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
   8:	687b      	ldr	r3, [r7, #4]
   a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2082
}
   c:	4618      	mov	r0, r3
   e:	f107 070c 	add.w	r7, r7, #12
  12:	46bd      	mov	sp, r7
  14:	bc80      	pop	{r7}
  16:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC1Prescaler:

00000000 <TIM_SetIC1Prescaler>:
TIM_SetIC1Prescaler():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2096
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2102
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
   c:	687b      	ldr	r3, [r7, #4]
   e:	8b1b      	ldrh	r3, [r3, #24]
  10:	b29b      	uxth	r3, r3
  12:	f023 030c 	bic.w	r3, r3, #12
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2105

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8b1b      	ldrh	r3, [r3, #24]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2106
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC2Prescaler:

00000000 <TIM_SetIC2Prescaler>:
TIM_SetIC2Prescaler():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2121
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2127
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
   c:	687b      	ldr	r3, [r7, #4]
   e:	8b1b      	ldrh	r3, [r3, #24]
  10:	b29b      	uxth	r3, r3
  12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2130

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8b1b      	ldrh	r3, [r3, #24]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea4f 2303 	mov.w	r3, r3, lsl #8
  28:	b29b      	uxth	r3, r3
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2131
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_SetIC3Prescaler:

00000000 <TIM_SetIC3Prescaler>:
TIM_SetIC3Prescaler():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2145
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2151
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
   c:	687b      	ldr	r3, [r7, #4]
   e:	8b9b      	ldrh	r3, [r3, #28]
  10:	b29b      	uxth	r3, r3
  12:	f023 030c 	bic.w	r3, r3, #12
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2154

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8b9b      	ldrh	r3, [r3, #28]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2155
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_SetIC4Prescaler:

00000000 <TIM_SetIC4Prescaler>:
TIM_SetIC4Prescaler():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2169
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2175
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
   c:	687b      	ldr	r3, [r7, #4]
   e:	8b9b      	ldrh	r3, [r3, #28]
  10:	b29b      	uxth	r3, r3
  12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2178

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	8b9b      	ldrh	r3, [r3, #28]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea4f 2303 	mov.w	r3, r3, lsl #8
  28:	b29b      	uxth	r3, r3
  2a:	ea42 0303 	orr.w	r3, r2, r3
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2179
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_BDTRConfig:

00000000 <TIM_BDTRConfig>:
TIM_BDTRConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2222
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	6039      	str	r1, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
   a:	683b      	ldr	r3, [r7, #0]
   c:	881a      	ldrh	r2, [r3, #0]
   e:	683b      	ldr	r3, [r7, #0]
  10:	885b      	ldrh	r3, [r3, #2]
  12:	ea42 0303 	orr.w	r3, r2, r3
  16:	b29a      	uxth	r2, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2235
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
  18:	683b      	ldr	r3, [r7, #0]
  1a:	889b      	ldrh	r3, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
  1c:	ea42 0303 	orr.w	r3, r2, r3
  20:	b29a      	uxth	r2, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2235
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
  22:	683b      	ldr	r3, [r7, #0]
  24:	88db      	ldrh	r3, [r3, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
  26:	ea42 0303 	orr.w	r3, r2, r3
  2a:	b29a      	uxth	r2, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2236
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
  2c:	683b      	ldr	r3, [r7, #0]
  2e:	891b      	ldrh	r3, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
  30:	ea42 0303 	orr.w	r3, r2, r3
  34:	b29a      	uxth	r2, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2236
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
  36:	683b      	ldr	r3, [r7, #0]
  38:	895b      	ldrh	r3, [r3, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
  3a:	ea42 0303 	orr.w	r3, r2, r3
  3e:	b29a      	uxth	r2, r3
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2237
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
  40:	683b      	ldr	r3, [r7, #0]
  42:	899b      	ldrh	r3, [r3, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2234
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
  44:	ea42 0303 	orr.w	r3, r2, r3
  48:	b29a      	uxth	r2, r3
  4a:	687b      	ldr	r3, [r7, #4]
  4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2238
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
  50:	f107 070c 	add.w	r7, r7, #12
  54:	46bd      	mov	sp, r7
  56:	bc80      	pop	{r7}
  58:	4770      	bx	lr
  5a:	bf00      	nop

Disassembly of section .text.TIM_BDTRStructInit:

00000000 <TIM_BDTRStructInit>:
TIM_BDTRStructInit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2247
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2249
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
   8:	687b      	ldr	r3, [r7, #4]
   a:	f04f 0200 	mov.w	r2, #0
   e:	801a      	strh	r2, [r3, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2250
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
  10:	687b      	ldr	r3, [r7, #4]
  12:	f04f 0200 	mov.w	r2, #0
  16:	805a      	strh	r2, [r3, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2251
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
  18:	687b      	ldr	r3, [r7, #4]
  1a:	f04f 0200 	mov.w	r2, #0
  1e:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2252
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
  20:	687b      	ldr	r3, [r7, #4]
  22:	f04f 0200 	mov.w	r2, #0
  26:	80da      	strh	r2, [r3, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2253
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
  28:	687b      	ldr	r3, [r7, #4]
  2a:	f04f 0200 	mov.w	r2, #0
  2e:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2254
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
  30:	687b      	ldr	r3, [r7, #4]
  32:	f04f 0200 	mov.w	r2, #0
  36:	815a      	strh	r2, [r3, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2255
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
  38:	687b      	ldr	r3, [r7, #4]
  3a:	f04f 0200 	mov.w	r2, #0
  3e:	819a      	strh	r2, [r3, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2256
}
  40:	f107 070c 	add.w	r7, r7, #12
  44:	46bd      	mov	sp, r7
  46:	bc80      	pop	{r7}
  48:	4770      	bx	lr
  4a:	bf00      	nop

Disassembly of section .text.TIM_CtrlPWMOutputs:

00000000 <TIM_CtrlPWMOutputs>:
TIM_CtrlPWMOutputs():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2266
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2271
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d00c      	beq.n	2c <TIM_CtrlPWMOutputs+0x2c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2274
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
  12:	687b      	ldr	r3, [r7, #4]
  14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  18:	b29b      	uxth	r3, r3
  1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
  1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
  22:	b29a      	uxth	r2, r3
  24:	687b      	ldr	r3, [r7, #4]
  26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  2a:	e00b      	b.n	44 <TIM_CtrlPWMOutputs+0x44>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2279
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
  32:	b29b      	uxth	r3, r3
  34:	ea4f 4343 	mov.w	r3, r3, lsl #17
  38:	ea4f 4353 	mov.w	r3, r3, lsr #17
  3c:	b29a      	uxth	r2, r3
  3e:	687b      	ldr	r3, [r7, #4]
  40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2281
  }  
}
  44:	f107 070c 	add.w	r7, r7, #12
  48:	46bd      	mov	sp, r7
  4a:	bc80      	pop	{r7}
  4c:	4770      	bx	lr
  4e:	bf00      	nop

Disassembly of section .text.TIM_SelectCOM:

00000000 <TIM_SelectCOM>:
TIM_SelectCOM():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2291
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2296
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectCOM+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2299
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
  12:	687b      	ldr	r3, [r7, #4]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0304 	orr.w	r3, r3, #4
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	809a      	strh	r2, [r3, #4]
  22:	e007      	b.n	34 <TIM_SelectCOM+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2304
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  24:	687b      	ldr	r3, [r7, #4]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0304 	bic.w	r3, r3, #4
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2306
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_CCPreloadControl:

00000000 <TIM_CCPreloadControl>:
TIM_CCPreloadControl():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2316
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2320
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_CCPreloadControl+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2323
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
  12:	687b      	ldr	r3, [r7, #4]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0301 	orr.w	r3, r3, #1
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	809a      	strh	r2, [r3, #4]
  22:	e007      	b.n	34 <TIM_CCPreloadControl+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2328
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  24:	687b      	ldr	r3, [r7, #4]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0301 	bic.w	r3, r3, #1
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2330
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_ITConfig:

00000000 <TIM_ITConfig>:
TIM_ITConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2373
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	707b      	strb	r3, [r7, #1]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2379
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  10:	787b      	ldrb	r3, [r7, #1]
  12:	2b00      	cmp	r3, #0
  14:	d009      	beq.n	2a <TIM_ITConfig+0x2a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2382
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
  16:	687b      	ldr	r3, [r7, #4]
  18:	899b      	ldrh	r3, [r3, #12]
  1a:	b29a      	uxth	r2, r3
  1c:	887b      	ldrh	r3, [r7, #2]
  1e:	ea42 0303 	orr.w	r3, r2, r3
  22:	b29a      	uxth	r2, r3
  24:	687b      	ldr	r3, [r7, #4]
  26:	819a      	strh	r2, [r3, #12]
  28:	e00b      	b.n	42 <TIM_ITConfig+0x42>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2387
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	899b      	ldrh	r3, [r3, #12]
  2e:	b29a      	uxth	r2, r3
  30:	887b      	ldrh	r3, [r7, #2]
  32:	ea6f 0303 	mvn.w	r3, r3
  36:	b29b      	uxth	r3, r3
  38:	ea02 0303 	and.w	r3, r2, r3
  3c:	b29a      	uxth	r2, r3
  3e:	687b      	ldr	r3, [r7, #4]
  40:	819a      	strh	r2, [r3, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2389
  }
}
  42:	f107 070c 	add.w	r7, r7, #12
  46:	46bd      	mov	sp, r7
  48:	bc80      	pop	{r7}
  4a:	4770      	bx	lr

Disassembly of section .text.TIM_GenerateEvent:

00000000 <TIM_GenerateEvent>:
TIM_GenerateEvent():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2411
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2417
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
   c:	687b      	ldr	r3, [r7, #4]
   e:	887a      	ldrh	r2, [r7, #2]
  10:	829a      	strh	r2, [r3, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2418
}
  12:	f107 070c 	add.w	r7, r7, #12
  16:	46bd      	mov	sp, r7
  18:	bc80      	pop	{r7}
  1a:	4770      	bx	lr

Disassembly of section .text.TIM_GetFlagStatus:

00000000 <TIM_GetFlagStatus>:
TIM_GetFlagStatus():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2444
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2445
  ITStatus bitstatus = RESET;  
   c:	f04f 0300 	mov.w	r3, #0
  10:	73fb      	strb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2451
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
  12:	687b      	ldr	r3, [r7, #4]
  14:	8a1b      	ldrh	r3, [r3, #16]
  16:	b29a      	uxth	r2, r3
  18:	887b      	ldrh	r3, [r7, #2]
  1a:	ea02 0303 	and.w	r3, r2, r3
  1e:	b29b      	uxth	r3, r3
  20:	2b00      	cmp	r3, #0
  22:	d003      	beq.n	2c <TIM_GetFlagStatus+0x2c>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2453
  {
    bitstatus = SET;
  24:	f04f 0301 	mov.w	r3, #1
  28:	73fb      	strb	r3, [r7, #15]
  2a:	e002      	b.n	32 <TIM_GetFlagStatus+0x32>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2457
  }
  else
  {
    bitstatus = RESET;
  2c:	f04f 0300 	mov.w	r3, #0
  30:	73fb      	strb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2459
  }
  return bitstatus;
  32:	7bfb      	ldrb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2460
}
  34:	4618      	mov	r0, r3
  36:	f107 0714 	add.w	r7, r7, #20
  3a:	46bd      	mov	sp, r7
  3c:	bc80      	pop	{r7}
  3e:	4770      	bx	lr

Disassembly of section .text.TIM_ClearFlag:

00000000 <TIM_ClearFlag>:
TIM_ClearFlag():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2486
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2491
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
   c:	887b      	ldrh	r3, [r7, #2]
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	b29a      	uxth	r2, r3
  14:	687b      	ldr	r3, [r7, #4]
  16:	821a      	strh	r2, [r3, #16]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2492
}
  18:	f107 070c 	add.w	r7, r7, #12
  1c:	46bd      	mov	sp, r7
  1e:	bc80      	pop	{r7}
  20:	4770      	bx	lr
  22:	bf00      	nop

Disassembly of section .text.TIM_GetITStatus:

00000000 <TIM_GetITStatus>:
TIM_GetITStatus():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2514
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2515
  ITStatus bitstatus = RESET;  
   c:	f04f 0300 	mov.w	r3, #0
  10:	73fb      	strb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2516
  uint16_t itstatus = 0x0, itenable = 0x0;
  12:	f04f 0300 	mov.w	r3, #0
  16:	81bb      	strh	r3, [r7, #12]
  18:	f04f 0300 	mov.w	r3, #0
  1c:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2521
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
  1e:	687b      	ldr	r3, [r7, #4]
  20:	8a1b      	ldrh	r3, [r3, #16]
  22:	b29a      	uxth	r2, r3
  24:	887b      	ldrh	r3, [r7, #2]
  26:	ea02 0303 	and.w	r3, r2, r3
  2a:	81bb      	strh	r3, [r7, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2523
  
  itenable = TIMx->DIER & TIM_IT;
  2c:	687b      	ldr	r3, [r7, #4]
  2e:	899b      	ldrh	r3, [r3, #12]
  30:	b29a      	uxth	r2, r3
  32:	887b      	ldrh	r3, [r7, #2]
  34:	ea02 0303 	and.w	r3, r2, r3
  38:	817b      	strh	r3, [r7, #10]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2524
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
  3a:	89bb      	ldrh	r3, [r7, #12]
  3c:	2b00      	cmp	r3, #0
  3e:	d006      	beq.n	4e <TIM_GetITStatus+0x4e>
  40:	897b      	ldrh	r3, [r7, #10]
  42:	2b00      	cmp	r3, #0
  44:	d003      	beq.n	4e <TIM_GetITStatus+0x4e>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2526
  {
    bitstatus = SET;
  46:	f04f 0301 	mov.w	r3, #1
  4a:	73fb      	strb	r3, [r7, #15]
  4c:	e002      	b.n	54 <TIM_GetITStatus+0x54>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2530
  }
  else
  {
    bitstatus = RESET;
  4e:	f04f 0300 	mov.w	r3, #0
  52:	73fb      	strb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2532
  }
  return bitstatus;
  54:	7bfb      	ldrb	r3, [r7, #15]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2533
}
  56:	4618      	mov	r0, r3
  58:	f107 0714 	add.w	r7, r7, #20
  5c:	46bd      	mov	sp, r7
  5e:	bc80      	pop	{r7}
  60:	4770      	bx	lr
  62:	bf00      	nop

Disassembly of section .text.TIM_ClearITPendingBit:

00000000 <TIM_ClearITPendingBit>:
TIM_ClearITPendingBit():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2555
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2560
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
   c:	887b      	ldrh	r3, [r7, #2]
   e:	ea6f 0303 	mvn.w	r3, r3
  12:	b29a      	uxth	r2, r3
  14:	687b      	ldr	r3, [r7, #4]
  16:	821a      	strh	r2, [r3, #16]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2561
}
  18:	f107 070c 	add.w	r7, r7, #12
  1c:	46bd      	mov	sp, r7
  1e:	bc80      	pop	{r7}
  20:	4770      	bx	lr
  22:	bf00      	nop

Disassembly of section .text.TIM_DMAConfig:

00000000 <TIM_DMAConfig>:
TIM_DMAConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2592
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	803b      	strh	r3, [r7, #0]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2599
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
  10:	887a      	ldrh	r2, [r7, #2]
  12:	883b      	ldrh	r3, [r7, #0]
  14:	ea42 0303 	orr.w	r3, r2, r3
  18:	b29a      	uxth	r2, r3
  1a:	687b      	ldr	r3, [r7, #4]
  1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2600
}
  20:	f107 070c 	add.w	r7, r7, #12
  24:	46bd      	mov	sp, r7
  26:	bc80      	pop	{r7}
  28:	4770      	bx	lr
  2a:	bf00      	nop

Disassembly of section .text.TIM_DMACmd:

00000000 <TIM_DMACmd>:
TIM_DMACmd():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2619
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	4613      	mov	r3, r2
   a:	460a      	mov	r2, r1
   c:	807a      	strh	r2, [r7, #2]
   e:	707b      	strb	r3, [r7, #1]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2625
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  10:	787b      	ldrb	r3, [r7, #1]
  12:	2b00      	cmp	r3, #0
  14:	d009      	beq.n	2a <TIM_DMACmd+0x2a>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2628
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
  16:	687b      	ldr	r3, [r7, #4]
  18:	899b      	ldrh	r3, [r3, #12]
  1a:	b29a      	uxth	r2, r3
  1c:	887b      	ldrh	r3, [r7, #2]
  1e:	ea42 0303 	orr.w	r3, r2, r3
  22:	b29a      	uxth	r2, r3
  24:	687b      	ldr	r3, [r7, #4]
  26:	819a      	strh	r2, [r3, #12]
  28:	e00b      	b.n	42 <TIM_DMACmd+0x42>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2633
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	899b      	ldrh	r3, [r3, #12]
  2e:	b29a      	uxth	r2, r3
  30:	887b      	ldrh	r3, [r7, #2]
  32:	ea6f 0303 	mvn.w	r3, r3
  36:	b29b      	uxth	r3, r3
  38:	ea02 0303 	and.w	r3, r2, r3
  3c:	b29a      	uxth	r2, r3
  3e:	687b      	ldr	r3, [r7, #4]
  40:	819a      	strh	r2, [r3, #12]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2635
  }
}
  42:	f107 070c 	add.w	r7, r7, #12
  46:	46bd      	mov	sp, r7
  48:	bc80      	pop	{r7}
  4a:	4770      	bx	lr

Disassembly of section .text.TIM_SelectCCDMA:

00000000 <TIM_SelectCCDMA>:
TIM_SelectCCDMA():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2645
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2650
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectCCDMA+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2653
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
  12:	687b      	ldr	r3, [r7, #4]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0308 	orr.w	r3, r3, #8
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	809a      	strh	r2, [r3, #4]
  22:	e007      	b.n	34 <TIM_SelectCCDMA+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2658
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  24:	687b      	ldr	r3, [r7, #4]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0308 	bic.w	r3, r3, #8
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2660
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_InternalClockConfig:

00000000 <TIM_InternalClockConfig>:
TIM_InternalClockConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2684
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2689
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
   8:	687b      	ldr	r3, [r7, #4]
   a:	891b      	ldrh	r3, [r3, #8]
   c:	b29b      	uxth	r3, r3
   e:	f023 0307 	bic.w	r3, r3, #7
  12:	b29a      	uxth	r2, r3
  14:	687b      	ldr	r3, [r7, #4]
  16:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2690
}
  18:	f107 070c 	add.w	r7, r7, #12
  1c:	46bd      	mov	sp, r7
  1e:	bc80      	pop	{r7}
  20:	4770      	bx	lr
  22:	bf00      	nop

Disassembly of section .text.TIM_ITRxExternalClockConfig:

00000000 <TIM_ITRxExternalClockConfig>:
TIM_ITRxExternalClockConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2705
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2711
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
   c:	887b      	ldrh	r3, [r7, #2]
   e:	6878      	ldr	r0, [r7, #4]
  10:	4619      	mov	r1, r3
  12:	f7ff fffe 	bl	0 <TIM_ITRxExternalClockConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2714

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  16:	687b      	ldr	r3, [r7, #4]
  18:	891b      	ldrh	r3, [r3, #8]
  1a:	b29b      	uxth	r3, r3
  1c:	f043 0307 	orr.w	r3, r3, #7
  20:	b29a      	uxth	r2, r3
  22:	687b      	ldr	r3, [r7, #4]
  24:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2715
}
  26:	f107 0708 	add.w	r7, r7, #8
  2a:	46bd      	mov	sp, r7
  2c:	bd80      	pop	{r7, pc}
  2e:	bf00      	nop

Disassembly of section .text.TIM_TIxExternalClockConfig:

00000000 <TIM_TIxExternalClockConfig>:
TIM_TIxExternalClockConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2736
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2743
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
   e:	897b      	ldrh	r3, [r7, #10]
  10:	2b60      	cmp	r3, #96	; 0x60
  12:	d108      	bne.n	26 <TIM_TIxExternalClockConfig+0x26>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2745
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  14:	893a      	ldrh	r2, [r7, #8]
  16:	88fb      	ldrh	r3, [r7, #6]
  18:	68f8      	ldr	r0, [r7, #12]
  1a:	4611      	mov	r1, r2
  1c:	f04f 0201 	mov.w	r2, #1
  20:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
  24:	e007      	b.n	36 <TIM_TIxExternalClockConfig+0x36>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2749
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  26:	893a      	ldrh	r2, [r7, #8]
  28:	88fb      	ldrh	r3, [r7, #6]
  2a:	68f8      	ldr	r0, [r7, #12]
  2c:	4611      	mov	r1, r2
  2e:	f04f 0201 	mov.w	r2, #1
  32:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2752
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  36:	897b      	ldrh	r3, [r7, #10]
  38:	68f8      	ldr	r0, [r7, #12]
  3a:	4619      	mov	r1, r3
  3c:	f7ff fffe 	bl	0 <TIM_TIxExternalClockConfig>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2754
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
  40:	68fb      	ldr	r3, [r7, #12]
  42:	891b      	ldrh	r3, [r3, #8]
  44:	b29b      	uxth	r3, r3
  46:	f043 0307 	orr.w	r3, r3, #7
  4a:	b29a      	uxth	r2, r3
  4c:	68fb      	ldr	r3, [r7, #12]
  4e:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2755
}
  50:	f107 0710 	add.w	r7, r7, #16
  54:	46bd      	mov	sp, r7
  56:	bd80      	pop	{r7, pc}

Disassembly of section .text.TIM_ETRClockMode1Config:

00000000 <TIM_ETRClockMode1Config>:
TIM_ETRClockMode1Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2776
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b580      	push	{r7, lr}
   2:	b086      	sub	sp, #24
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2777
  uint16_t tmpsmcr = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2785
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  14:	8979      	ldrh	r1, [r7, #10]
  16:	893a      	ldrh	r2, [r7, #8]
  18:	88fb      	ldrh	r3, [r7, #6]
  1a:	68f8      	ldr	r0, [r7, #12]
  1c:	f7ff fffe 	bl	0 <TIM_ETRClockMode1Config>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2788
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	891b      	ldrh	r3, [r3, #8]
  24:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2791

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  26:	8afb      	ldrh	r3, [r7, #22]
  28:	f023 0307 	bic.w	r3, r3, #7
  2c:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2794

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  2e:	8afb      	ldrh	r3, [r7, #22]
  30:	f043 0307 	orr.w	r3, r3, #7
  34:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2797

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  36:	8afb      	ldrh	r3, [r7, #22]
  38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  3c:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2798
  tmpsmcr |= TIM_TS_ETRF;
  3e:	8afb      	ldrh	r3, [r7, #22]
  40:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  44:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2801

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  46:	68fb      	ldr	r3, [r7, #12]
  48:	8afa      	ldrh	r2, [r7, #22]
  4a:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2802
}
  4c:	f107 0718 	add.w	r7, r7, #24
  50:	46bd      	mov	sp, r7
  52:	bd80      	pop	{r7, pc}

Disassembly of section .text.TIM_ETRClockMode2Config:

00000000 <TIM_ETRClockMode2Config>:
TIM_ETRClockMode2Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2823
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b580      	push	{r7, lr}
   2:	b084      	sub	sp, #16
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2831
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
   e:	8979      	ldrh	r1, [r7, #10]
  10:	893a      	ldrh	r2, [r7, #8]
  12:	88fb      	ldrh	r3, [r7, #6]
  14:	68f8      	ldr	r0, [r7, #12]
  16:	f7ff fffe 	bl	0 <TIM_ETRClockMode2Config>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2834

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
  1a:	68fb      	ldr	r3, [r7, #12]
  1c:	891b      	ldrh	r3, [r3, #8]
  1e:	b29b      	uxth	r3, r3
  20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  24:	b29a      	uxth	r2, r3
  26:	68fb      	ldr	r3, [r7, #12]
  28:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2835
}
  2a:	f107 0710 	add.w	r7, r7, #16
  2e:	46bd      	mov	sp, r7
  30:	bd80      	pop	{r7, pc}
  32:	bf00      	nop

Disassembly of section .text.TIM_SelectInputTrigger:

00000000 <TIM_SelectInputTrigger>:
TIM_SelectInputTrigger():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2893
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
   0:	b480      	push	{r7}
   2:	b085      	sub	sp, #20
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2894
  uint16_t tmpsmcr = 0;
   c:	f04f 0300 	mov.w	r3, #0
  10:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2901
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  12:	687b      	ldr	r3, [r7, #4]
  14:	891b      	ldrh	r3, [r3, #8]
  16:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2904

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
  18:	89fb      	ldrh	r3, [r7, #14]
  1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  1e:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2907

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
  20:	89fa      	ldrh	r2, [r7, #14]
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	81fb      	strh	r3, [r7, #14]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2910

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	89fa      	ldrh	r2, [r7, #14]
  2e:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2911
}
  30:	f107 0714 	add.w	r7, r7, #20
  34:	46bd      	mov	sp, r7
  36:	bc80      	pop	{r7}
  38:	4770      	bx	lr
  3a:	bf00      	nop

Disassembly of section .text.TIM_SelectOutputTrigger:

00000000 <TIM_SelectOutputTrigger>:
TIM_SelectOutputTrigger():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2936
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2942
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
   c:	687b      	ldr	r3, [r7, #4]
   e:	889b      	ldrh	r3, [r3, #4]
  10:	b29b      	uxth	r3, r3
  12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2944
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	889b      	ldrh	r3, [r3, #4]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2945
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_SelectSlaveMode:

00000000 <TIM_SelectSlaveMode>:
TIM_SelectSlaveMode():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2960
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2966
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
   c:	687b      	ldr	r3, [r7, #4]
   e:	891b      	ldrh	r3, [r3, #8]
  10:	b29b      	uxth	r3, r3
  12:	f023 0307 	bic.w	r3, r3, #7
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2969

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	891b      	ldrh	r3, [r3, #8]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2970
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_SelectMasterSlaveMode:

00000000 <TIM_SelectMasterSlaveMode>:
TIM_SelectMasterSlaveMode():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2983
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2989
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
   c:	687b      	ldr	r3, [r7, #4]
   e:	891b      	ldrh	r3, [r3, #8]
  10:	b29b      	uxth	r3, r3
  12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  16:	b29a      	uxth	r2, r3
  18:	687b      	ldr	r3, [r7, #4]
  1a:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2992
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
  1c:	687b      	ldr	r3, [r7, #4]
  1e:	891b      	ldrh	r3, [r3, #8]
  20:	b29a      	uxth	r2, r3
  22:	887b      	ldrh	r3, [r7, #2]
  24:	ea42 0303 	orr.w	r3, r2, r3
  28:	b29a      	uxth	r2, r3
  2a:	687b      	ldr	r3, [r7, #4]
  2c:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:2993
}
  2e:	f107 070c 	add.w	r7, r7, #12
  32:	46bd      	mov	sp, r7
  34:	bc80      	pop	{r7}
  36:	4770      	bx	lr

Disassembly of section .text.TIM_ETRConfig:

00000000 <TIM_ETRConfig>:
TIM_ETRConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3014
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3015
  uint16_t tmpsmcr = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3023
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
  14:	68fb      	ldr	r3, [r7, #12]
  16:	891b      	ldrh	r3, [r3, #8]
  18:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3026

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
  1a:	8afb      	ldrh	r3, [r7, #22]
  1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  20:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3029

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
  22:	88fb      	ldrh	r3, [r7, #6]
  24:	ea4f 2303 	mov.w	r3, r3, lsl #8
  28:	b29a      	uxth	r2, r3
  2a:	893b      	ldrh	r3, [r7, #8]
  2c:	ea42 0303 	orr.w	r3, r2, r3
  30:	b29a      	uxth	r2, r3
  32:	897b      	ldrh	r3, [r7, #10]
  34:	ea42 0303 	orr.w	r3, r2, r3
  38:	b29a      	uxth	r2, r3
  3a:	8afb      	ldrh	r3, [r7, #22]
  3c:	ea42 0303 	orr.w	r3, r2, r3
  40:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3032

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  42:	68fb      	ldr	r3, [r7, #12]
  44:	8afa      	ldrh	r2, [r7, #22]
  46:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3033
}
  48:	f107 071c 	add.w	r7, r7, #28
  4c:	46bd      	mov	sp, r7
  4e:	bc80      	pop	{r7}
  50:	4770      	bx	lr
  52:	bf00      	nop

Disassembly of section .text.TIM_EncoderInterfaceConfig:

00000000 <TIM_EncoderInterfaceConfig>:
TIM_EncoderInterfaceConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3072
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3073
  uint16_t tmpsmcr = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3074
  uint16_t tmpccmr1 = 0;
  14:	f04f 0300 	mov.w	r3, #0
  18:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3075
  uint16_t tmpccer = 0;
  1a:	f04f 0300 	mov.w	r3, #0
  1e:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3084
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	891b      	ldrh	r3, [r3, #8]
  24:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3087

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  26:	68fb      	ldr	r3, [r7, #12]
  28:	8b1b      	ldrh	r3, [r3, #24]
  2a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3090

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	8c1b      	ldrh	r3, [r3, #32]
  30:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3093

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
  32:	8afb      	ldrh	r3, [r7, #22]
  34:	f023 0307 	bic.w	r3, r3, #7
  38:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3094
  tmpsmcr |= TIM_EncoderMode;
  3a:	8afa      	ldrh	r2, [r7, #22]
  3c:	897b      	ldrh	r3, [r7, #10]
  3e:	ea42 0303 	orr.w	r3, r2, r3
  42:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3097

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  44:	8abb      	ldrh	r3, [r7, #20]
  46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4a:	f023 0303 	bic.w	r3, r3, #3
  4e:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3098
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
  50:	8abb      	ldrh	r3, [r7, #20]
  52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  56:	f043 0301 	orr.w	r3, r3, #1
  5a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3101

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
  5c:	8a7b      	ldrh	r3, [r7, #18]
  5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
  62:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3102
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
  64:	88fb      	ldrh	r3, [r7, #6]
  66:	ea4f 1303 	mov.w	r3, r3, lsl #4
  6a:	b29a      	uxth	r2, r3
  6c:	893b      	ldrh	r3, [r7, #8]
  6e:	ea42 0303 	orr.w	r3, r2, r3
  72:	b29a      	uxth	r2, r3
  74:	8a7b      	ldrh	r3, [r7, #18]
  76:	ea42 0303 	orr.w	r3, r2, r3
  7a:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3105

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  7c:	68fb      	ldr	r3, [r7, #12]
  7e:	8afa      	ldrh	r2, [r7, #22]
  80:	811a      	strh	r2, [r3, #8]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3108

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
  82:	68fb      	ldr	r3, [r7, #12]
  84:	8aba      	ldrh	r2, [r7, #20]
  86:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3111

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
  88:	68fb      	ldr	r3, [r7, #12]
  8a:	8a7a      	ldrh	r2, [r7, #18]
  8c:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3112
}
  8e:	f107 071c 	add.w	r7, r7, #28
  92:	46bd      	mov	sp, r7
  94:	bc80      	pop	{r7}
  96:	4770      	bx	lr

Disassembly of section .text.TIM_SelectHallSensor:

00000000 <TIM_SelectHallSensor>:
TIM_SelectHallSensor():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3123
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	70fb      	strb	r3, [r7, #3]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3128
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   c:	78fb      	ldrb	r3, [r7, #3]
   e:	2b00      	cmp	r3, #0
  10:	d008      	beq.n	24 <TIM_SelectHallSensor+0x24>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3131
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
  12:	687b      	ldr	r3, [r7, #4]
  14:	889b      	ldrh	r3, [r3, #4]
  16:	b29b      	uxth	r3, r3
  18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  1c:	b29a      	uxth	r2, r3
  1e:	687b      	ldr	r3, [r7, #4]
  20:	809a      	strh	r2, [r3, #4]
  22:	e007      	b.n	34 <TIM_SelectHallSensor+0x34>
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3136
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  24:	687b      	ldr	r3, [r7, #4]
  26:	889b      	ldrh	r3, [r3, #4]
  28:	b29b      	uxth	r3, r3
  2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  2e:	b29a      	uxth	r2, r3
  30:	687b      	ldr	r3, [r7, #4]
  32:	809a      	strh	r2, [r3, #4]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3138
  }
}
  34:	f107 070c 	add.w	r7, r7, #12
  38:	46bd      	mov	sp, r7
  3a:	bc80      	pop	{r7}
  3c:	4770      	bx	lr
  3e:	bf00      	nop

Disassembly of section .text.TIM_RemapConfig:

00000000 <TIM_RemapConfig>:
TIM_RemapConfig():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3174
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
   0:	b480      	push	{r7}
   2:	b083      	sub	sp, #12
   4:	af00      	add	r7, sp, #0
   6:	6078      	str	r0, [r7, #4]
   8:	460b      	mov	r3, r1
   a:	807b      	strh	r3, [r7, #2]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3180
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
   c:	687b      	ldr	r3, [r7, #4]
   e:	887a      	ldrh	r2, [r7, #2]
  10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3181
}
  14:	f107 070c 	add.w	r7, r7, #12
  18:	46bd      	mov	sp, r7
  1a:	bc80      	pop	{r7}
  1c:	4770      	bx	lr
  1e:	bf00      	nop

Disassembly of section .text.TI1_Config:

00000000 <TI1_Config>:
TI1_Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3206
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3207
  uint16_t tmpccmr1 = 0, tmpccer = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
  14:	f04f 0300 	mov.w	r3, #0
  18:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3210

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
  1a:	68fb      	ldr	r3, [r7, #12]
  1c:	8c1b      	ldrh	r3, [r3, #32]
  1e:	b29b      	uxth	r3, r3
  20:	f023 0301 	bic.w	r3, r3, #1
  24:	b29a      	uxth	r2, r3
  26:	68fb      	ldr	r3, [r7, #12]
  28:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3211
  tmpccmr1 = TIMx->CCMR1;
  2a:	68fb      	ldr	r3, [r7, #12]
  2c:	8b1b      	ldrh	r3, [r3, #24]
  2e:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3212
  tmpccer = TIMx->CCER;
  30:	68fb      	ldr	r3, [r7, #12]
  32:	8c1b      	ldrh	r3, [r3, #32]
  34:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3215

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
  36:	8afb      	ldrh	r3, [r7, #22]
  38:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
  3c:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3216
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  3e:	88fb      	ldrh	r3, [r7, #6]
  40:	ea4f 1303 	mov.w	r3, r3, lsl #4
  44:	b29a      	uxth	r2, r3
  46:	893b      	ldrh	r3, [r7, #8]
  48:	ea42 0303 	orr.w	r3, r2, r3
  4c:	b29a      	uxth	r2, r3
  4e:	8afb      	ldrh	r3, [r7, #22]
  50:	ea42 0303 	orr.w	r3, r2, r3
  54:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3219

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  56:	8abb      	ldrh	r3, [r7, #20]
  58:	f023 030a 	bic.w	r3, r3, #10
  5c:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3220
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  5e:	897a      	ldrh	r2, [r7, #10]
  60:	8abb      	ldrh	r3, [r7, #20]
  62:	ea42 0303 	orr.w	r3, r2, r3
  66:	b29b      	uxth	r3, r3
  68:	f043 0301 	orr.w	r3, r3, #1
  6c:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3223

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  6e:	68fb      	ldr	r3, [r7, #12]
  70:	8afa      	ldrh	r2, [r7, #22]
  72:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3224
  TIMx->CCER = tmpccer;
  74:	68fb      	ldr	r3, [r7, #12]
  76:	8aba      	ldrh	r2, [r7, #20]
  78:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3225
}
  7a:	f107 071c 	add.w	r7, r7, #28
  7e:	46bd      	mov	sp, r7
  80:	bc80      	pop	{r7}
  82:	4770      	bx	lr

Disassembly of section .text.TI2_Config:

00000000 <TI2_Config>:
TI2_Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3247
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3248
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
  14:	f04f 0300 	mov.w	r3, #0
  18:	82bb      	strh	r3, [r7, #20]
  1a:	f04f 0300 	mov.w	r3, #0
  1e:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3251

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	8c1b      	ldrh	r3, [r3, #32]
  24:	b29b      	uxth	r3, r3
  26:	f023 0310 	bic.w	r3, r3, #16
  2a:	b29a      	uxth	r2, r3
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3252
  tmpccmr1 = TIMx->CCMR1;
  30:	68fb      	ldr	r3, [r7, #12]
  32:	8b1b      	ldrh	r3, [r3, #24]
  34:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3253
  tmpccer = TIMx->CCER;
  36:	68fb      	ldr	r3, [r7, #12]
  38:	8c1b      	ldrh	r3, [r3, #32]
  3a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3254
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  3c:	897b      	ldrh	r3, [r7, #10]
  3e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  42:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3257

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  44:	8afb      	ldrh	r3, [r7, #22]
  46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4a:	ea4f 5303 	mov.w	r3, r3, lsl #20
  4e:	ea4f 5313 	mov.w	r3, r3, lsr #20
  52:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3258
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  54:	88fb      	ldrh	r3, [r7, #6]
  56:	ea4f 3303 	mov.w	r3, r3, lsl #12
  5a:	b29a      	uxth	r2, r3
  5c:	8afb      	ldrh	r3, [r7, #22]
  5e:	ea42 0303 	orr.w	r3, r2, r3
  62:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3259
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
  64:	893b      	ldrh	r3, [r7, #8]
  66:	ea4f 2303 	mov.w	r3, r3, lsl #8
  6a:	b29a      	uxth	r2, r3
  6c:	8afb      	ldrh	r3, [r7, #22]
  6e:	ea42 0303 	orr.w	r3, r2, r3
  72:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3262

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  74:	8abb      	ldrh	r3, [r7, #20]
  76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  7a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3263
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
  7c:	8a7a      	ldrh	r2, [r7, #18]
  7e:	8abb      	ldrh	r3, [r7, #20]
  80:	ea42 0303 	orr.w	r3, r2, r3
  84:	b29b      	uxth	r3, r3
  86:	f043 0310 	orr.w	r3, r3, #16
  8a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3266

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  8c:	68fb      	ldr	r3, [r7, #12]
  8e:	8afa      	ldrh	r2, [r7, #22]
  90:	831a      	strh	r2, [r3, #24]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3267
  TIMx->CCER = tmpccer;
  92:	68fb      	ldr	r3, [r7, #12]
  94:	8aba      	ldrh	r2, [r7, #20]
  96:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3268
}
  98:	f107 071c 	add.w	r7, r7, #28
  9c:	46bd      	mov	sp, r7
  9e:	bc80      	pop	{r7}
  a0:	4770      	bx	lr
  a2:	bf00      	nop

Disassembly of section .text.TI3_Config:

00000000 <TI3_Config>:
TI3_Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3289
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3290
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
  14:	f04f 0300 	mov.w	r3, #0
  18:	82bb      	strh	r3, [r7, #20]
  1a:	f04f 0300 	mov.w	r3, #0
  1e:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3293

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	8c1b      	ldrh	r3, [r3, #32]
  24:	b29b      	uxth	r3, r3
  26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  2a:	b29a      	uxth	r2, r3
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3294
  tmpccmr2 = TIMx->CCMR2;
  30:	68fb      	ldr	r3, [r7, #12]
  32:	8b9b      	ldrh	r3, [r3, #28]
  34:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3295
  tmpccer = TIMx->CCER;
  36:	68fb      	ldr	r3, [r7, #12]
  38:	8c1b      	ldrh	r3, [r3, #32]
  3a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3296
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  3c:	897b      	ldrh	r3, [r7, #10]
  3e:	ea4f 2303 	mov.w	r3, r3, lsl #8
  42:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3299

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
  44:	8afb      	ldrh	r3, [r7, #22]
  46:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
  4a:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3300
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  4c:	88fb      	ldrh	r3, [r7, #6]
  4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
  52:	b29a      	uxth	r2, r3
  54:	893b      	ldrh	r3, [r7, #8]
  56:	ea42 0303 	orr.w	r3, r2, r3
  5a:	b29a      	uxth	r2, r3
  5c:	8afb      	ldrh	r3, [r7, #22]
  5e:	ea42 0303 	orr.w	r3, r2, r3
  62:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3303

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  64:	8abb      	ldrh	r3, [r7, #20]
  66:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
  6a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3304
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
  6c:	8a7a      	ldrh	r2, [r7, #18]
  6e:	8abb      	ldrh	r3, [r7, #20]
  70:	ea42 0303 	orr.w	r3, r2, r3
  74:	b29b      	uxth	r3, r3
  76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  7a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3307

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  7c:	68fb      	ldr	r3, [r7, #12]
  7e:	8afa      	ldrh	r2, [r7, #22]
  80:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3308
  TIMx->CCER = tmpccer;
  82:	68fb      	ldr	r3, [r7, #12]
  84:	8aba      	ldrh	r2, [r7, #20]
  86:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3309
}
  88:	f107 071c 	add.w	r7, r7, #28
  8c:	46bd      	mov	sp, r7
  8e:	bc80      	pop	{r7}
  90:	4770      	bx	lr
  92:	bf00      	nop

Disassembly of section .text.TI4_Config:

00000000 <TI4_Config>:
TI4_Config():
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3330
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
   0:	b480      	push	{r7}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	8179      	strh	r1, [r7, #10]
   a:	813a      	strh	r2, [r7, #8]
   c:	80fb      	strh	r3, [r7, #6]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3331
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
   e:	f04f 0300 	mov.w	r3, #0
  12:	82fb      	strh	r3, [r7, #22]
  14:	f04f 0300 	mov.w	r3, #0
  18:	82bb      	strh	r3, [r7, #20]
  1a:	f04f 0300 	mov.w	r3, #0
  1e:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3334

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
  20:	68fb      	ldr	r3, [r7, #12]
  22:	8c1b      	ldrh	r3, [r3, #32]
  24:	b29b      	uxth	r3, r3
  26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  2a:	b29a      	uxth	r2, r3
  2c:	68fb      	ldr	r3, [r7, #12]
  2e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3335
  tmpccmr2 = TIMx->CCMR2;
  30:	68fb      	ldr	r3, [r7, #12]
  32:	8b9b      	ldrh	r3, [r3, #28]
  34:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3336
  tmpccer = TIMx->CCER;
  36:	68fb      	ldr	r3, [r7, #12]
  38:	8c1b      	ldrh	r3, [r3, #32]
  3a:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3337
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  3c:	897b      	ldrh	r3, [r7, #10]
  3e:	ea4f 3303 	mov.w	r3, r3, lsl #12
  42:	827b      	strh	r3, [r7, #18]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3340

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
  44:	8afb      	ldrh	r3, [r7, #22]
  46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4a:	ea4f 5303 	mov.w	r3, r3, lsl #20
  4e:	ea4f 5313 	mov.w	r3, r3, lsr #20
  52:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3341
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  54:	893b      	ldrh	r3, [r7, #8]
  56:	ea4f 2303 	mov.w	r3, r3, lsl #8
  5a:	b29a      	uxth	r2, r3
  5c:	8afb      	ldrh	r3, [r7, #22]
  5e:	ea42 0303 	orr.w	r3, r2, r3
  62:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3342
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
  64:	88fb      	ldrh	r3, [r7, #6]
  66:	ea4f 3303 	mov.w	r3, r3, lsl #12
  6a:	b29a      	uxth	r2, r3
  6c:	8afb      	ldrh	r3, [r7, #22]
  6e:	ea42 0303 	orr.w	r3, r2, r3
  72:	82fb      	strh	r3, [r7, #22]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3345

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  74:	8abb      	ldrh	r3, [r7, #20]
  76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  7a:	ea4f 4343 	mov.w	r3, r3, lsl #17
  7e:	ea4f 4353 	mov.w	r3, r3, lsr #17
  82:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3346
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
  84:	8a7a      	ldrh	r2, [r7, #18]
  86:	8abb      	ldrh	r3, [r7, #20]
  88:	ea42 0303 	orr.w	r3, r2, r3
  8c:	b29b      	uxth	r3, r3
  8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  92:	82bb      	strh	r3, [r7, #20]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3349

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  94:	68fb      	ldr	r3, [r7, #12]
  96:	8afa      	ldrh	r2, [r7, #22]
  98:	839a      	strh	r2, [r3, #28]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3350
  TIMx->CCER = tmpccer ;
  9a:	68fb      	ldr	r3, [r7, #12]
  9c:	8aba      	ldrh	r2, [r7, #20]
  9e:	841a      	strh	r2, [r3, #32]
C:\Users\gcristian\Desktop\F429\Drivers\src\platform\stm32libs\stm32f4xx\src/stm32f4xx_tim.c:3351
}
  a0:	f107 071c 	add.w	r7, r7, #28
  a4:	46bd      	mov	sp, r7
  a6:	bc80      	pop	{r7}
  a8:	4770      	bx	lr
  aa:	bf00      	nop
